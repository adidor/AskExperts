[
    {
        "text": "i remember the reaction where he had drawn these characters and he was slowly moving around and like people had no experience with 3d navigation it was all still keyboard we didn't even have mice and set up at that time but slowly moving going up picked up a key go to a wall the wall disappears in a little animation and there's a monster like right there and he practically fell out of his chair it was just like ah and games just didn't do that you know the games were the god's eye view you were a little invested in your little guy you can be like you know happy or sad when things happen but you just did not get that kind of startle reaction you weren't in somebody something in the back of your brain some reptile brain thing is just going oh  something just happened and that was one of those early points where it's like yeah this is going to make a difference this is going to be powerful and it's going to matter the following is a conversation with john carmack widely considered to be one of the greatest programmers ever he was the co-founder of id software and the lead programmer on several games that revolutionized the technology the experience and the role of gaming in our society including commander keen wolfenstein 3d doom and quake he spent many years as the cto of oculus vr helping to create portals into virtual worlds and to define the technological path to the metaverse and meta and now he has been shifting some of his attention to the problem of artificial general intelligence this was the longest conversation on this podcast at over five hours and still i could talk to john many many more times and we hope to do just that this is the lux treatment podcast to support it please check out our sponsors",
        "start": "00:00:00",
        "duration": 220.718,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "in the description and now dear friends here's john carmack what was the first program you've ever written do you remember yeah i do so i remember being in a radio shack going up to the trs 80 computers and learning just enough to be able to do 10 print john carmack i am and it's kind of interesting how of course i you know carnegie and richie kind of standardized hello world as the first thing that you do in every computer programming language and every computer but not having any interaction with the cultures of unix or any other standardized things it was just like well what am i going to say i'm going to say my name and then you learn how to do go210 and have it scroll all off the screen and that was definitely the first thing that i wound up doing on a computer can i ask your programming advice i was always told in the beginning that you're not allowed to use go to statements that's really bad programming is this correct or not jumping around code can can we look at the philosophy and the technical uh aspects of the go-to statement that seems so convenient but it's supposed to be certainly back in the day in basic programming languages you didn't have proper loops you didn't have four whiles and repeats you know that was the land of pascal for people that kind of generally had access to it back then so you had no choice but to use go-to's and as you made what were big programs back then which were a thousand line basic program is a really big program they did tend to sort of degenerate into madness uh you didn't have good editors or code exploration tools so you would wind up fixing things in one place add a little patch and there's reasons why structured programming generally helps understanding but go-to's aren't poisonous sometimes they're the right thing to do",
        "start": "00:01:50",
        "duration": 208.882,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "usually it's because there's a language feature missing like nested breaks or something where it's it can sometimes be better to do a go to clean up or go to error rather than having multiple flags multiple if statements littered throughout things but but it is rare if you grip through all of my code right now i am i don't think any of my current code bases would actually have a go to but uh deep within sort of the technical underpinnings of a major game engine you're gonna have some go-to's in a couple places probably yeah the infrastructure on top of like the closer you get to the machine code the more goatees you're gonna see the more of these like hacks you're going to see because uh the set of features available to you in low-level programming languages is not uh is limited so print john carmack when is the first time if we could talk about love that you fell in love with programming you said like this this is really something special it really was something that was one of those love at first sight things where just really from the time that i understood what a computer was even i mean i remember looking through old encyclopedias at the black and white photos of the ibm mainframes with the reel-to-reel tape decks and for people nowadays it can be a little hard to understand what the world was like then from information gathering where i would go to the libraries and there would be a couple books on the shelf about computers and they would be very out of date even at that point just not a lot of information but i would grab everything that i could find and you know devour everything whenever time or newsweek had some article about computers i would like cut it out with scissors and put it somewhere it just it",
        "start": "00:03:35",
        "duration": 204.16000000000003,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "felt like this magical thing to me this idea that the computer would just do exactly what you told it to i mean and there's a little bit of the genie monkey's paw sort of issues there where you'd better be really really careful with what you're telling it to do but it wasn't going to back talk you it wasn't going to have a different point of view it was going to carry out what you told it to do and if you had the right commands you could make it do these pretty magical things and so what kind of programs did you write at first so beyond the print john carmack so i can remember as going through the learning process where you find at the start you're just learning how to do the most basic possible things and i can remember stuff like uh a superman comic that radio shack commissioned to have i it's like superman had lost some of his super brain and kids had to use radio shack trs 80 computers to do calculations for to help him kind of complete his heroics and i'd find little things like that i am and then get a few basic books to be able to kind of work my way up and again it was so precious back then i had a couple books that would teach me important things about it i had one book that i could start to learn a little bit of assembly language from and i'd have a few books on basic and some things that i could get from the libraries but i my goals in the early days was almost always making games of various kinds you know i had i loved the arcade games and the early atari 2600 games and being able to do some of those things myself on the computers was very much what i aspired to and it was a whole journey where if you learn normal basic you can't do any kind of an action game you can write an adventure game you can write things where you say what do you do here i get sword attack troll that type of thing and that can be done",
        "start": "00:05:17",
        "duration": 213.03899999999996,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "in the context of basic i but to do things that had moving graphics there were only the most limited things you could possibly do you could maybe do breakout or pong or that sort of thing in low resolution graphics and in fact one of my first sort of major technical hacks that i was kind of fond of was on the apple ii computers they had a they had a mode called low resolution graphics where of course all graphics were low resolution back then but you know regular low resolution graphics it was a grid of 40 by 40 pixels normally but they could have 16 different colors and i wanted to make a game kind of like the uh the arcade game vanguard just a scrolling game and i wanted to just kind of have it scroll vertically up and i could move a little ship around you could manage to do that in basic but there's no way you could redraw the whole screen and i remember at the time just coming up with what felt like a brainstorm to me where i knew enough about the way the hardware was controlled where the text screen and the low resolution graphics screen were basically the same thing and all those computers could scroll their text screen reasonably you could do a listing and it would scroll things up and i figured out that i could kind of tweak just a couple things that i barely understood to put it into a graphics mode and i could draw graphics and then i could just do a line feed at the very bottom of the screen and then the system would scroll it all up using an assembly language routine that i didn't know how to write back then so i that was like this first great hack that sort of had analogs later on in my career for a lot of different things so i found out that i could draw a screen i could do a line feed at the bottom it would scroll it up once i could draw a couple more lines of stuff at the bottom",
        "start": "00:07:04",
        "duration": 200.32100000000003,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "and that was my first way to kind of scroll the screen which i you know which was interesting and that that played a big part later on in the id software days as well so do efficient school efficient drawing where you don't have to draw the whole screen but you draw from the bottom using the thing that was designed in the hardware for text output yeah where so much of until recently i'm game design was limited by what you could actually get the computer to do where it's easy to say like okay i want to scroll the screen you just redraw the entire screen at a slight offset and nowadays that works just fine computers are ludicrously fast i but up until a decade ago or so there were all these things everybody wanted to do but if they knew enough programming to be able to make it happen it would happen too slow to be a good experience either just ridiculously slow or just slow enough that it wasn't fun to experience it like that so so much of kind of the first couple decades of the programming work that i did was largely figuring out how to do something that everybody knows how they want it to happen it just has to happen two to ten times faster than sort of the straightforward way of doing things would make it happen and it's different now because at this point lots of things you can just do in the most naive possible way and it still works out you know you don't have nearly the creative limitations or the incentives for optimizing on that level and there's a lot of pros and cons to that but i do generally you know i'm not going to do the the angry old man shaking my fist at the clouds bit where back in my day programmers had to do real programming you know it's it's amazing that you can just kind of pick an idea and go do it right now and you don't have to be some assembly language wizard or deep gpu arcanist to be able",
        "start": "00:08:44",
        "duration": 216.23899999999998,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "to figure out how to make your wishes happen well they're still see that's true but let me put on my old man with a hat and say that probably the thing that will define the future still requires you to operate at the limits of the current system so we'll probably talk about this but if you talk about building the metaverse and building a vr experience that's compelling it probably requires you to not to go to assembly or maybe not literally but sort of uh spiritually to go to the limits of what the system is capable of yeah and that really was why virtual reality was um specifically interesting to me where it had all the ties to you could say that even back in the early days i have some old magazine articles that's talking about doom as a virtual reality experience back when just seeing anything in 3d uh so you could say that we've been trying to build those virtual experiences from the very beginning and in the modern era virtual reality especially on the mobile side of things when it's standalone you're basically using a cell phone chip to be able to produce these very immersive experiences it does require work it's not at the level of what an old-school console game programmer would have operated at where you're looking at hardware registers and you're scheduling all the dn dma accesses but it is still definitely a different level than what a web developer or or even a pc steam game developer usually has to work at and again it's great there's opportunities for people that want to operate it either into that spectrum there and still provide a lot of value to the world let me ask you uh sort of a big question about preference",
        "start": "00:10:32",
        "duration": 205.44099999999997,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "what would you say is the best programming language your favorite but also the best you've seen throughout your career you're considered by many to be the greatest programmer ever i mean it's so difficult to place that label on anyone if but if you put it on anyone it's you so let me ask you these kind of ridiculous questions of what's the best band of all time but in your case what's the best programming language everything has all the caveats about it but so what i use so nowadays i i do program a reasonable amount of python for aiml sorts of work uh that's i'm not a native python programmer it's something i came to very late in my career i understand what it's good for you don't dream in python i do not and it has some of those things where there's some amazing stats when you say if you just start if you make a loop you know a triply nested loop and start doing operations in python you can be thousands to potentially a million times slower than a proper gpu tensor operation and these are staggering numbers you know you can be as much slower as we've almost gotten faster in our uh you know our pace of progress and all this other miraculous stuff so your intuitions about inefficiencies within the python sort of it keeps hitting me upside the face where it just it's gotten to the point now i understand it's like okay you just can't do a loop if you care about performance in python you have to figure out how you can reformat this into some big vector operation or something that's going to be done completely within a c plus plus library but the other hand is it's it's amazingly convenient and you just see stuff that people are able to cobble together by you just import a few different things and you can do stuff that nobody on earth could do 10 years ago and you can do it in a little",
        "start": "00:12:15",
        "duration": 208.1589999999999,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "cookbook thing that you copy pasted out of a website so that is really great when i'm sitting down to do what i consider kind of serious programming it's still in c plus and it's really kind of a c flavored c plus plus at that where i'm not big into the modern template meta programming sorts of things i see a lot of train wrecks coming from some of that over abstraction i spent a few years really going kind of deep into the kind of historical lisp work um and the haskell and some of the functional programming sides of things and there's there is a lot of value there in the way you think about things and i changed a lot of the way i write my cnc plus plus code based on what i learned about uh the value that comes out of not having this random mutable state that you kind of lose track of because something that many people don't really appreciate until they've been at it for a long time is that it's not the writing of the program initially it's the whole lifespan of the program and that's when it's not necessarily just how fast you wrote it or how how fast it operates but it's how can it bend and adapt as situations change and then the thing that i've really been learning in my time at meta with the oculus and vr work is it's also how well it hands off between a continuous kind of revolving door of programmers taking over maintenance and different things and how you get people up to speed in different areas and there's all these other different aspects of it so c plus plus a good language for handover between engineers probably not the best i and there's some really interesting aspects to this where in some cases languages that are not um that are not generally thought well of for many reasons like c is derided pretty broadly that yes obviously all of these security flaws",
        "start": "00:13:59",
        "duration": 216.31999999999994,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "that happen with the memory and uh unsafeness and buffer overruns and the things that you've got there but there is this underappreciated aspect to the language is so simple anyone can go and you know if you know c you can generally jump in someplace and not have to learn what paradigms they're using because there just aren't that many available i think there's you know and there's some really really well-written c code like it's i find it great that if i'm messing around with something in open bsd say i mean i can be walking around in the kernel and i'm like i understand everything that's going on here uh it's not hard for me to figure out what's i you know what i need to do to to you know make whatever change that i need to while you can have you know more significant languages like it's a downside of lisp where i don't regret the time that i spent with lisp i i think that it i it did help you know help my thinking about programming in some ways but the people that are the biggest defenders of lisp are saying how malleable of a language it is that if you write a huge list program you've basically invented your own kind of language and structure because it's not the primitives of the language you're using very much it's all of the things you've built on top of that and then a language like racket kind of one of the more modern lisp versions it's essentially touted as a language for building other languages and i understand the value of that for a tiny little project but the idea of that for one of these long term supported by lots of people kind of horrifies me where all of those abstractions that you're like okay you can't touch this code till you educate yourself on all of these things that we've built on top of that and it was interesting to see how uh when google made go a lot of time criticisms of that are it's like wow",
        "start": "00:15:48",
        "duration": 210.64099999999996,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "this is not a state-of-the-art language this language is just so simple and almost crude and you could see the programming language people just looking down at it but it does seem to be quite popular as basically saying this is the good things about c everybody can just jump right in and use it you don't need to restructure your brain to write good code in it so i i wish that i had more opportunity for doing some work in go uh rust is the other modern language that everybody talks about that i'm not fit past judgment on i've done you know a little bit beyond hello world i wrote some like video decompression work in rust just as an exercise but that was a few years ago and i haven't really used it since you know the best programming language is the one that works generally that you're currently using because that's another trap is in almost every case i've seen when people mixed languages on a project that's a mistake i would rather stay just in one language so that everybody can work across the entire thing and we have i get meta we have a lot of projects that use kind of react frameworks so you've got javascript here and then you have c plus plus for real work and then you may have java interfacing with some other part of the android system and those are all kind of horrible things and that was you know one thing that i i remember talking with uh with baz at facebook about it where like man i wish we could have just said we're only hiring c plus plus programmers i am and he just thought from the from the facebook meta perspective well we just wouldn't be able to find enough i you know with the thousands of programmers they've got there it is not necessarily a dying breed but you can sure find a lot more java javascript programmers",
        "start": "00:17:33",
        "duration": 203.44000000000003,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "and i i kind of mentioned that to elon one time and he was kind of flabbergasted about that it's like well you just you go out and you find those programmers and you don't hire the other programmers that don't do the languages that you want to use but right now i guess yeah they're using javascript on a bunch of the the spacex work for the ui side of things when you go find ui programmers they're javascript programmers i wonder if that's because there's a lot of javascript programmers because i do think that great programmers are rare that it's not you know if you just look at statistics of how many people are using different programming languages that doesn't tell you the story of what the great programmers are using and so you have to really look at what you were speaking to which is the fundamentals of a language what does it encourage how does it encourage you to think what kind of systems does it encourage you to build there is something about c plus plus that has elements of creativity but forces you to be an adult about your programming which it expects you to be an adult expectantly not forced you do and so it's so it brings out people that are willing to be creative in terms of building large systems and coming up with interesting solutions but at the same time have the sort of the good software engineering practices that amend themselves to real-world systems let me ask you about this other language javascript so if we you know aliens visit in thousands of years and humans are long gone something tells me that most of the systems they find would be running",
        "start": "00:19:14",
        "duration": 198.639,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "javascript i kind of think that if the simula if we're living in a simulation it's really it's written in javascript um you know for the longest time even still javascript didn't get any respect and yet it runs so much of the world in an increasing number of the world is it possible that all everything will be written in javascript one day so the engineering under javascript is really pretty phenomenal uh the the systems that make javascript run as fast as it does right now are kind of miracles of modern engineering in many ways it does feel like it is not an optimal language for all the things that it's being used for or an optimal distribution system to you to build huge apps in something like this uh without type systems and so on i am but i think for a lot of people it does reasonably the necessary things it's still a c flavored language it's still uh you know a braces and semicolon language uh it's not hard for people to be trained in javascript and then understand the roots of where it came from i think garbage collection is unequivocally a good thing for most programs to be written in it's funny that i still just this morning i was on i was seeing a twitter thread of a bunch of really senior game dev people arguing about the the virtues and costs of garbage collection and you will run into some people that are top-notch programmers that just say no this is literally not a good thing because it makes you lazy yes that it makes you not think about things and i do disagree i think that there is so much objective data on the the vulnerabilities that have happened in cnc plus plus programs sometimes written by the best programmers in the world it's like nobody is good enough to",
        "start": "00:20:53",
        "duration": 215.04099999999997,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "avoid ever shooting themselves in the foot with that you write enough c code you're going to shoot yourself in the foot and garbage collection is a very great thing for the vast majority of programs it's only when you get into the tightest of real-time things that you start saying it's like no the garbage collection has more costs and it has benefits for me there but that's not 99 plus percent of all the software in the world so javascript is not terrible in those ways and i am and so much of programming is not the language itself it's the infrastructure around ever you know that surrounds it all the libraries that you can get and the different stuff that you can ways you can deploy it i am the portability that it gives you and javascript is really strong on a lot of those things where for a long time and it still does if i look at it the the web stack about everything that has to go when you do something really trivial in javascript and it shows up on a web browser to kind of x-ray through that and see everything that has to happen for your one little javascript statement to turn into something visible in your web browser it's very very disquieting just the the depth of that stack and the fact that so few people can even comprehend all of the levels that are going on there but it's again i have to caution myself to not be the in the good old days old man about it because clearly there's enormous value here the world does run on javascript to a pretty good approximation there and it's not falling apart there's a bunch of scary stuff where you look at console logs and you just see all of these bad things that are happening but it's still kind of limping along and nobody really notices",
        "start": "00:22:41",
        "duration": 205.36000000000004,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "but so much of my systems design and systems analysis goes around you should understand what the speed of light is like what would be the best you could possibly do here and it sounds horrible but in a lot of cases you can be a thousand times off your speed of light velocity for something and it's still be okay and in fact it can even sometimes still be the optimal thing in a larger system standpoint where there's a lot of things that you don't want to have to parachute in someone like me to go in and say make this this web page run a thousand times faster you know make this web app into uh a hardcore native application that starts up in 37 milliseconds and everything responds in less than one frame latency that's just not necessary and if somebody wants to go pay me millions of dollars to do software like that when they can take somebody right out of a boot camp and say spin up an application for this uh often being efficient is not really the best metric it's like there's that applies in a lot of areas where it's kind of interesting how a lot of our appliances and everything are all built around energy efficiency sometimes at the expense of robustness in some other ways or higher costs in other ways where there's interesting things where energy or electricity could become much cheaper in a future world and that could change our engineering trade-offs for the way we build certain things where you could throw away efficiency and actually get more benefits that actually matter i mean that's one of my you know i one of the directions i was considering swerving into was uh nuclear energy when i was kind of like what do i want to do next it was either going to be uh cost-effective nuclear fission or artificial general intelligence and one of the one of my pet ideas there is like you know people don't understand",
        "start": "00:24:24",
        "duration": 224.4,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "how cheap nuclear fuel is and there would be ways that i you could be a quarter the efficiency or less but if it wound up making your plant 10 times cheaper that could be a radical innovation in something like that so there's like some of these thoughts around like direct fission energy conversion fission fragment conversion that you know maybe you build something that doesn't require all the steam turbines and everything even if it winds up being less efficient so that applies a lot in programming where there's always it's always good to know what you could do if you really sat down and took it took it far because sometimes there's discontinuities like around user reaction times there are some points where the difference between operating in one second and 750 milliseconds uh not that huge you'll see it in web page statistics but most of the usability stuff not that great but if you get down to 50 milliseconds then all of a sudden this just feels amazing you know it's just like doing your bidding instantly rather than you're giving it a command twiddling your thumbs waiting for it to respond so sometimes it's important to really crunch hard to get over some threshold but there are there are broad basins in the value metric for lots of work where it just doesn't pay to even go that extra mile and they're craftsmen that you know they just don't want to buy that and more power to them you know if somebody just wants to say no i'm going to be i'm my pride is in my work i'm never going to do something that's not as good as i could possibly make it i respect that and sometimes i am that person but i try to focus more on the larger value picture and you do pick your battles and you deploy your resources in the play that's going to give you sort of the best user value in the end well if you",
        "start": "00:26:15",
        "duration": 211.03900000000002,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "look at the evolution of life on earth as a kind of programming effort it's uh it seems like efficiency isn't the thing that's being optimized for like natural selection is very inefficient but it kind of adapts and through the process of adaptations building more and more complex systems they're more and more intelligent the final result is kind of pretty interesting and so i think of javascript the same way it's like this giant mess that you know things naturally die off if they don't work and they if they if they're becoming useful to people they kind of naturally live and then you build this community large community of people that are generating code and some code is sticky some is not and nobody knows the the inefficiencies or the efficiencies or the breaking points like how reliable this code is and you kind of just run it assume it works and then get unpleasantly surprised and that's very kind of the evolutionary process so that's a really good analogy and we can go a lot of places with that where in the earliest days of programming when you had finite you could count the bytes that you had to work on this you had all the the kind of hackers playing code golf to be one less instruction than the other person's multiply routine to kind of get through and and it was so perfectly crafted it was a crystal piece of artwork when you had a program because there just were not that many you couldn't afford to be lazy in different ways and in many ways i see that as akin to the symbolic ai work where again if you did not have the resources to just say well we're gonna do billions and billions of programmable weights here you have to turn it down into something that is symbolic and crafted like that but that's definitely",
        "start": "00:28:01",
        "duration": 214.161,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "not the way dna and life and biological evolution and things work i you know on the one hand it's it's almost humbling how little programming code is in our bodies you know we've got a couple billion base pairs and it's like this all fits on a thumb drive for years now and then our brains are even a smaller section of that you've got maybe 50 megabytes and this is not like shannon limit perfectly uh information dense uh conveyances here it's like these are messy codes you know they're broken up into amino acids a lot of them don't do important things or they do things in very awkward ways but it is this process of just accumulation on top of things and you need you need scale both you need scale force or the population for that to work out and in the early days in the 50s and 60s the the kind of ancient era of computers where you could count when they said like when the internet started even in the 70s there were like 18 hosts or something on it it was this small finite number and you were still optimizing everything to be as good as you possibly could be but now it's billions and billions of devices and everything going on and you can have this very much natural evolution going on where lots of things are tried lots of things are blowing up venture capitalists lose their money when a startup invested in the wrong tech stack and things completely failed or failed to scale but you know but good things do come out of it and it's interesting to see the the mimetic evolution of the way different things happen like mentioning hello world at the beginning it's funny how some little thing like that where everybody every programmer knows hello world now and that was a completely arbitrary sort of decision that just came out of the dominance of unix and c and early",
        "start": "00:29:48",
        "duration": 215.67800000000005,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "examples of things like that so millions of experiments are going on all the time but some things do kind of rise to the top and win the fitness war for whether it's mind space or programming techniques or anything like there's a site on stack exchange called code golf where people compete to write the shortest possible program for particular tasks in all the different kinds of languages and it's really interesting to see folks kind of their masters of their craft really play with the limits of programming languages it's really beautiful to see and across all the different programming languages you get to see some of these weird programming languages and mainstream ones by the difference between python two and three you get to see the difference between c and c plus plus in java and you get to see javascript all of that and it's kind of inspiring to see how much depth of possibility there is within programming languages that code golf kind of tasks reveal most of us if you do any kind of programming you kind of do boring kind of very vanilla type of code that's the way to build large systems but it's nice to see that the possibility of creative genius is still within those languages it's laden within those languages so given that given that you are once again one of the greatest programmers ever what do you think makes a good programmer maybe a good modern programmer so i just gave a long rant slash lecture at meta uh to the tpm organization and my my biggest point was everything that we're doing really should flow from user value you know all the good things that",
        "start": "00:31:36",
        "duration": 206.64300000000006,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "we're doing it's like we're we're not technical people it's like you shouldn't be taking pride just in the specific thing like code golf is the sort of thing it's a fun puzzle game but that really should not be a major motivator for you it's like we're solving problems for people or we're providing entertainment to people we're doing something of value to people that's displacing something else in their life so we want to be providing a net value over what they could be doing uh but instead they're choosing to use our products and that's where i mean it sounds trite or corny but i fundamentally do think that's how you make the world a better place if you have given more value to people than it took you and your team to create then the world's a better place people have they've gone from something of lesser value chosen to use your product and their life feels better for that and if you've produced that economically that's that's a really good thing i you know on the other hand if you spent ridiculous amounts of money you've just kind of shoveled a lot of cash into a wood chipper there and you should maybe you know not feel so good about what you're doing so being proud about like a specific architecture or specific technology or a specific code sequence that you've done it's great to get a little smile like a tiny little dopamine hit for that but the top level metric should be that you're building things of value now you can get in the argument about how you you know what is user value how do you actually quantify that and there can be big arguments about that but it's easy to be able to say okay this pissed off user there is not getting value from what you're doing this user over there with the big smile on their face i am the moment of delight when something happened there's a value that's happened",
        "start": "00:33:25",
        "duration": 199.76100000000002,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "there i mean if you you have to at least accept that there is a concept of user value even if you have trouble exactly quantifying it you can usually make relative arguments about it well this was better than this uh we've improved things so you know being a you know being a servant to the user is your job when you're doing when you're a developer you want to be producing something that i you know other people are going to find valuable and if you are technically inclined then finding the right levers to be able to pull to be able to make a design that's going to produce the most value for the least amount of effort and it always has to be i kind of divide there's a ratio there where you it's a problem at the big tech companies you know whether it's you know meta google apple microsoft amazon companies that have almost infinite money i i mean i know their cfo will complain that it's not infinite money but from most developer standpoints it really does feel like it and it's almost counterintuitive that if you're working hard as a developer on something there's always this thought if only i had more resources more people more ram more megahertz i then my product will be better and that sense that at certain points it's certainly true that if you are really hamstrung by this removing an obstacle will will make a better product make more value but if you're not making your core design decisions in this fiercely competitive way where you're saying feature a or feature b you can't just say let's do both uh because then you're not making a value judgment about them you're just saying well they both seem good i don't want to necessarily have to pick out which one is better or how much better and tell team b that uh sorry we're not",
        "start": "00:35:05",
        "duration": 209.51900000000003,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "going to do this because a is more important but that i am that notion of always having to really critically value what you're doing your time the resources you expend even the opportunity cost of doing something else that's you know super important well let me ask you about this the big debates that you're mentioning of how to measure value is it possible to measure it kind of um numerically uh or can you do the sort of johnny eye the designer route of imagining sort of uh somebody using a thing and imagining a smile on their face imagining the experience of love and joy that you have when you use the thing that's from a design perspective or if you're building more like a low lower level thing for like linux you imagine a developer that might come across this and use it and become uh happy and better off because of it so where do you land on those things is it measurable so i imagine like meta and google will probably try to measure the thing they'll try to it's like you try to optimize engagement or something let's measure engagement and then i think there is a kind of i mean i admire the designer ethic of like think of a future that's immeasurable and you try to make somebody in that future that's different from today happy so i do usually favor if you can get any kind of a a metric that's good by all means listen to the data but you can go too far there where we've had problems where it's like hey we had a performance regression because our fancy new telemetry system is doing a bazillion file rights uh to kind of archive this stuff because we needed to collect information to determine if we were",
        "start": "00:36:50",
        "duration": 214.80099999999996,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "doing you know if our plans were good so when information is available you should never ignore it i mean for the actual users using the thing human beings using the thing large number of human beings and you get to see sort of at least so there's the zero to one problem of when you're doing something really new you do kind of have to make a guess but one of the points that i've been making at meta is we have more than enough users now that anything somebody wants to try in vr we have users that will be interested in that you do not get to make a completely green field blue sky pitch and say i'm going to do this because i think it might be interesting i challenge everyone there are going to be people whether it's you know working in vr on your i'm like on your desktop replacement or communicating with people in different ways or playing the games there are there are going to be probably millions of people or at least in if you pick some tiny niche that we're not in right now there's still going to be thousands of people out there that have the headsets that would be your target market and i tell people pay attention to them don't invent fictional users don't you know make an alice bob charlie uh that fits whatever matrix of uh of tendencies that you want to break the market down to because it's a mistake to think about imaginary users when you've got real users that you could be working with but you know on the other hand there is there is value to having a kind of wholeness of vision for a product and i companies like meta have you know they understand the trade-offs where you can have a company like spacex or you know apple in the the steve jobs era where you have a very powerful leading personality that i you know they",
        "start": "00:38:39",
        "duration": 209.12000000000003,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "can micromanage at a very low level and can say it's like no that handle needs to be different or that that icon needs to change the tint there and they clearly get a lot of value out of it they also burn through a lot of employees that have horror stories to tell about uh working there afterwards my position is that you're at your best when you've got a leader that is at their limit of what they can kind of comprehend of everything below them uh and they can't have an informed opinion about everything that's going on and you take somebody it's you've got to believe that somebody that has 30 40 years of experience you would hope that they've got wisdom that the the just out of boot camp person uh contributing doesn't have and that if they're like well that's wrong there you probably shouldn't do it that way or or even just don't do it that way do it another way so there's value there but it can't go beyond a certain level i am i mean i have steve jobs stories of him saying things that are just wrong right in front of me about technical things because he was not operating at that level i but when it does work and you do get that kind of passionate leader that's thinking about the entire product and just really deeply cares about not letting anything slip through the cracks i i think that's got a lot of value but the other side of that is the people saying that well we want to have these independent teams that are bubbling up the ideas because like it's it's almost it's anti-capitalist or anti-free market to say it's like i want my grand you know my great leader to go ahead and dictate all these points there where clearly free markets bring up things that you know you don't expect like in vr we we saw a bunch of things like it didn't turn out at all the way the early",
        "start": "00:40:24",
        "duration": 197.359,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "people thought were going to be the key applications and things that you know would not have been approved by uh you know the the dark cabal making the decisions about what gets into the store turn out in some cases be extremely successful uh so yeah i definitely kind of wanted to be there at the point where i did make a pitch it's like hey make me vr dictator and i'll go and get done i am and that's just it's not in the culture at meta you know and they they understand the trade-offs they i and that's just not the way that's not the company that they want the team that they uh that they want to do it's fascinating because vr and we'll talk about it more it's still it's still unclear to me in what way vr will change the world because it does seem clear that vr will somehow fundamentally transform this world and it's unclear to me how yeah yeah and it's let me know when you want to get into that you being the best programmer ever okay in the early days when you didn't have when you didn't have adult responsibilities of leading teams and all that kind of stuff and you can focus on just being a programmer what did the productive day in the life of john carmack look like how many hours is the keyboard how much sleep what was the source of calories that fueled the brain what was it like what time did you wake up so i was able to be remarkably consistent about what was good working conditions for me for a very long time um i was never one of the programmers that i that would do all-nighters going through work for 20 hours straight it's like my brain generally starts turning to mush after 12 hours or so",
        "start": "00:42:03",
        "duration": 196.64099999999996,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "i am but the hard work is really important and i would work for for decades i would work 60 hours a week i would work a 10 hour day 6 days a week and try to be productive at that now my schedule shifted around a fair amount when i was young without any kids i am any other responsibilities i was on one of those cycling schedules where i'd kind of get in an hour later each day and roll around through the entire time and i'd wind up kind of pulling in at two or three in the afternoon sometimes and then working again past you know midnight or two in the morning and that was i am when it was just me trying to make things happen i am and i was usually isolated off in my office people generally didn't bother me much uh at id and i could get a lot of programming work done that way i did settle into a more normal schedule when i was taking kids to school and things like that so kids were the forcing function that got you to wake up and at the same time it's not clear to me that there was a much of a difference in the productivity with i with that where i kind of feel if i just get up when i feel like it it's usually a little later each day but i just recently made the focusing decision to try to push my schedule back a little bit earlier to getting up at eight in the morning and trying to to shift things around like i'm i'm often doing experiments with myself about what should i be doing to to be more productive and one of the things that i did realize was happening in recent months where i would i would go for a walk or a run i cover like four miles a day and and i would usually do that just as the sun's going down at here in texas now",
        "start": "00:43:46",
        "duration": 200.399,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "and it's still really damn hot but i'd go out at 8 30 or something and cover the time there and then the showering and it was putting a hole in my day where i would have still a couple hours after that and sometimes my best hours were at night when nobody else is around nobody's bothering me but that hole in the day was a problem so just a couple weeks ago i made the pin the change to go ahead and say all right i'm going to get up a little earlier i'm going to do a walk or get out there first so i can have more uninterrupted time so i'm still playing with factors like this as i kind of optimize my my work efforts but it's always been you know it's it was 60 hours a week for a very long time to some degree i had a little thing in the back of my head where i was almost jealous of some of the programmers that would do these marathon sessions and and i had like dave taylor one of the guys that he had he would be one of those people that would fall asleep under his desk sometimes and all the the kind of classic hacker tropes about things and a part of me was like i was a little bothered that that wasn't me that i i wouldn't go program 20 hours straight because i'm just i'm falling apart and not being very effective after 12 hours i mean yeah 12 hour programming that's fine when you're doing that but it never you're not doing smart work much after at least i'm not but there's a range of people i mean that's something that a lot of people don't really get in their gut where there are people that work on four hours of sleep and are smart and can continue to do good work but then there's a lot of people that just fall apart so i do tell people that i always try to get eight hours of sleep it's not this you know push yourself harder get up earlier i just do worse work where uh you know there's you can work a",
        "start": "00:45:26",
        "duration": 195.1999999999999,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "hundred hours a week and still get eight hours of sleep if you just kind of prioritize things correctly but i do believe in working hard working a lot i there was a comment that game dev made that that i know there's a backlash against really hard work in a lot of cases and i get into online arguments about this all the time but he was basically saying yeah 40 hours a week that's kind of a part-time job and if you were really in it you're doing what you think is important what you're passionate about working more gets more done and i it's just really not possible to argue with that if you've been around the people that that work with that level of intensity and just say it's like no they should just stop and we had i kind of came back around to that a couple years ago where i was using the fictional example of all right some people say they'll say with a straight face they think no you you are less productive if you work more than 40 hours a week and they're generally misinterpreting things where your your marginal productivity for an hour after eight hours is less than in one of your peak hours but you're not literally getting less done there is a point where you start breaking things and getting worse worse behavior and everything out of it where you're literally going backwards but it's not at 8 or 10 or 12 hours and the fictional example i would use was imagine there's an asteroid coming to impact you know to crash into earth destroy all of human life i do you want elon musk or the people working at spacex that are building the interceptor that's going to uh to deflect the asteroid do you want them to clock out at five because damn it they're just going to go do worse work if they work another couple hours and you know it seems absurd",
        "start": "00:47:03",
        "duration": 206.88100000000003,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "and that's a hypothetical though and everyone can dismiss that but then when coronavirus was hitting and you have all of these medical personnel that are clearly pushing themselves really really hard and i'd say it's like okay do you want all of these scientists working on treatments and vaccines and caring for all of these people are they really screwing everything up by working more than eight hours a day and of course people say i'm just an to say something like that but it's i you know it's the truth working longer gets more done well so that's kind of uh the layer one but i'd like to also say that at least i believe depending on the person depending on the task working more and harder will make you better for the for the next week in those peak hours so there's something about a deep dedication to a thing that's kind of gets deep in you so it's the the hard work isn't just about the raw hours of productivity it's the it's the thing it does to you in the in the weeks and months after too you're tempering yourself in some ways and i think you know it's like jiro dreams of sushi if you really dedicate yourself completely to making the sushi like to really putting in the long hours day after day after day um you become a true craftsman of the thing you're doing now there's of course discussions about are you sacrificing a lot of personal relationships are you sacrificing a lot of other possible things you could do with that time but if you're talking about purely being a master or craftsman of your art that more hours isn't just about doing more it's about becoming better at the thing you're doing yeah and i don't gain say anybody that wants to work the minimum amount they've got other",
        "start": "00:48:47",
        "duration": 229.11900000000003,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "priorities in their life my only argument that i'm making it's not that everybody should work hard it's that if you want to accomplish something working longer and harder is the path to getting it accomplished well let me ask you about this then uh the the mythical work-life balance is for an engineer it seems like that's one of the professions in the for programmer where working hard does lead to greater productivity in it but it also raises the question of um sort of personal relationships and all that kind of stuff family and um how are you able to find work-life balance is there advice you can give maybe even outside yourself have you been able to arrive at any wisdom on this part in your years of life i do think that there's a wide range of people where different people have different needs it's not a one size fits all i am certainly what works for me i i can tell enough that i'm you know i'm different than a typical average person and the way things impact me the you know the things that i want to do my goals are different and sort of the levers to impact things are different where you know i've literally never felt burnout and i know there's lots of brilliant smart people that that do world-leading work that get burned out and it's never hit me i'm you know i've never been at a point where i'm like i'm i just don't care about this i don't want to do this anymore but i've always had the flexibility to work on lots of interesting things you know i can always just turn my gaze to something else and have a great time working on that and so much of that and so much of the ability to actually work hard is the ability to have multiple things to choose from and to use use your time on the most appropriate thing like there are there",
        "start": "00:50:41",
        "duration": 222.398,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "are time periods where i am it's the best time for me to read a new research paper that i need to really be thinking you know hard about it then there's a time that maybe i should just scan and organize my old notes because my you know i'm just not on top of things then there's the time that all right let's go you know bang out a few hundred lines of code for something so switching between them has been real valuable so you'll always have kind of joy in your heart for all the things you're doing and that that is the kind of work-life balance as a first sort of step yeah you're always happy i do happy yeah i mean that's like i a lot of people would say that often i look like kind of a grim person you know with just sitting there with a neutral expression or even like knitted brows and a frown on my face as i'm staring at something that's what my goodness looks like for you yeah it's it's kind of true or that that's like okay i'm pushing through this i'm making progress here i am you know i know that doesn't work for everyone i know it doesn't work for most people i am but what i'm always trying to do in those cases is i don't want to let somebody that might be a person like that be told by someone else that no don't try it don't even try that out as an option where i you know work life balance versus kind of your life's work where there's a small subset of the people that can be very happy being obsessive about things and you know obsession can often get things done that just practical prudent pedestrian work won't or at least won't for a very long time there's legends of uh your nutritional intake uh in the early days uh what can you say about sort of as a you know being a program as a kind of athlete so",
        "start": "00:52:33",
        "duration": 206.48100000000008,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "what what what was uh the nutrition that fueled i have never been that great on i on really paying attention to it where i'm good enough that i i don't eat a lot you know i've never been like a big heavy guy but uh it was interesting where one of the things that i can remember being an unhappy teenager not having enough money and like one of the things that bothered me about not having enough money is i couldn't buy pizza whenever i wanted to so i got rich and then i bought a whole lot of pizza that was defining like that's what being rich like i could buy all the pizza and comic books and video games that uh that i wanted to and it really didn't take that much but uh the pizza was one of those things and it's absolutely true that for a long time it did software i had a pizza delivered every single day you know the delivery guy knew me my name and i didn't find out until years later that apparently i was such a good customer that they just never raised the price on me and i was using this six-year-old price for the pizzas that they were still kind of sending my way every day so you were doing um eating once a day or were you uh it would be spread out you know you have a few pieces of pizza you have some more later on and i'd maybe have something at home i it was one of the nice things that facebook meta is they do they feed you quite well you get a different i guess now it's doordash sorts of things delivered but uh they take care of making sure that everybody does get well fed i probably had better food those six years that i was working in the meta office there than i used to before but i've it's worked out okay for me my health has always been good i get a pretty good amount of exercise and i don't eat to excess and i avoid a lot of other kind of not so good for you",
        "start": "00:54:18",
        "duration": 211.28,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "things so i'm still doing quite well at my age did you have a a kind of i don't know spiritual experience with food or coffee or any of that kind of stuff i mean you know the programming experience you know with music and or or like i listen to brown noise in a program or like creating an environment and the things you take into your body just everything you construct can become a kind of ritual that empowers the whole process of the program did you have that relationship with pizza or um it would really be with diet coke there still is that sense of you know drop the can down crack open the can of diet coke all right now i mean business we're getting to work here but still to this day yeah it's diet coke still part yeah probably eight or nine a day nice okay uh what about your setup how many screens what kind of keyboard is there something interesting what kind of i ide emacs vim or something modern uh linux what operating system laptop or any any interesting thing that brings you joy so i kind of migrated cultures where early on through all of game dev there was sort of one culture there which was really quite distinct from the more uh the silicon valley venture you know uh culture for things it's they're different groups and they have pretty different mores in the way they think about things where and i still do think a lot of the big companies can learn uh can learn things from the the hardcore game development side of things where it still boggles my mind how i am how hostile to debuggers and ides that so much of the the kind of big money get billions of dollars silicon valley venture-backed funds are well that's interesting sorry so you're",
        "start": "00:56:03",
        "duration": 204.72000000000003,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "saying like like uh big companies that google and meta are hostile to they are not big on debuggers and ides like so much of it is like emacs bim for things and we just assume that debuggers don't work most of the time for the systems and a lot of this comes from a sort of linux bias on a lot of things where i did come up through the the personal computers and then the dos and then i am you know windows and and it was borland tools and then visual studio and do you appreciate the buggers very much so i mean a debugger is how you get a view into a system that's too complicated to understand i mean anybody that thinks just read the code and think about it that's an insane statement in the you can't even read all the code on a big system you have to do experiments on the system and doing that by adding log statements recompiling and re-running it uh is an incredibly inefficient way of doing it i mean yes you can always get things done even if you're working with stone knives and you know and bear skins that's that is the mark of a good programmer is that given any tools you will figure out a way to get it done but it's amazing what you can do with sometimes much much better tools where instead of just going through this iterative compile run debug cycle and you have the you have the old lisp direction of like you've got a repel and you're working interactively and doing amazing things there but in many cases a debugger has a very powerful user interface that can stop examine all the different things in your program set all these different break points and of course you can do that with gdb or whatever there but this is one of the user interface fundamental principles where when something is complicated to do",
        "start": "00:57:45",
        "duration": 202.47899999999987,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "you won't use it very often there's people that will break out gdb when they're at their wit's end and they just have beat their head against a problem for so long but for somebody that kind of grew up in game dev it's like they were running into the debugger anyways before they even knew there was a problem and you would just stop and see you know what was happening and sometimes you could fix things even before you you know even before you did one compile cycle you could be in the debugger and you would say well i'm just going to change this right here and yep that did the job and fix it and go on and for people who don't know gdb is a of popular i guess linux debugger uh primarily for c plus plus they they handle most of the languages but it's you know it's based on c as the the original kind of unix heritage and it's kind of like command line it's not user friendly it's not it doesn't allow for clean visualizations and you're you're exactly right so you're using this kind of debugger usually when you're what's end and there's a problem that you can't figure out why by just looking at the codes they have to find it that's how i guess normal programmers use it but you're saying there should be tools that kind of visualize and help you as part of the programming process just the normal programming process to to understand the code deeper yeah when i'm working on like my cc plus code i'm always running it from the debugger you know just i type in the code i i run it many times the first thing i do after writing code is set a breakpoint and step through the function now other people say it's like oh i do that in my head well your head is a faulty interpreter of all those things there and i've written brand new code i want to step in there and i'm going to single",
        "start": "00:59:26",
        "duration": 192.08099999999996,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "step through that examine lots of things and see if it's actually doing what i expected it to it is a kind of companion the debugger like it you're you're now coding in an interactive way with another being uh a debugger is a kind of dumb being but it's a reliable being it's that is an interesting question of what role does ai play in that kind of with codex and these kind of ability to generate code might be you might start having tools that understand the code in interesting deep ways that can work with you because there's a whole spectrum there from static code analyzers and various kind of dynamic tools they're up to ai that can conceivably grok these programs that no literally no human can understand they're they're too big too intertwined and too interconnected but it's not beyond the possibility of understanding it's just beyond what we can hold in our heads as kind of mutable state while we're working on things and and i'm a big proponent again of things like static analyzers and some of that stuff where you'll find some people that don't like being scolded by a program for how they've written something where it's like oh i know better and sometimes you do but that was something that i was it was very very valuable for me when and not too many people get an opportunity like this to have this is almost one of those spiritual experiences as a programmer an awakening to i am the in software code bases were a couple million lines of code and at one point i had used a few of the different analysis tools but i made a point to really go through and scrub the code base using every tool that i could find",
        "start": "01:01:02",
        "duration": 200.71900000000002,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "and it was eye opening where we had a reputation for having some of the the most robust strongest code you know where there were some you know great things that i remember hearing from like microsoft telling us about crashes on xbox and we had this tiny number that they said were were probably literally hardware errors and then you have other significant titles that just have millions of faults that are getting recorded all the time so i was proud of our code on a lot of levels but when i took this code analysis squeegee through everything it was it was shocking how many errors there were in there things that you can say okay this was this was a copy paste not changing something right here lots of things that were you know the most the most common problem was something in a printf format string that was the wrong data type that could cause crashes there and you know you really want the warnings for things like that then the next most common was missing a check for null that could actually happen that could blow things up and those are obviously like top cc plus things everybody has those problems but the long tail of all of the different little things that could go wrong there and we had good programmers and my own codes that i'd be looking at it's like oh i wrote that code that's definitely wrong we've been using this for a year and it's this submarine you know this mine sitting there waiting for us to step on and it was humbling it was uh and i reached the conclusion that anything that can be syntactically allowed in your language if i'm it's going to show up eventually in a large enough code base i you're not going to good intentions aren't going to keep it from happening you need automated tools and guardrails for things and those start with things like",
        "start": "01:02:43",
        "duration": 200.47999999999996,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "static types and or even type hints in the more dynamic languages but the people that rebel against that that basically say uh that slows me down doing that there's something to that i get that i've written you know i've cobbled things together in a notebook i am like wow this is great that it just happened but yeah that's kind of sketchy but it's working fine i don't care it does come back to that that value analysis where sometimes it's right to not care but when you do care if it's going to be something that's going to live for years and it's going to have other people working on it i and it's going to be deployed to millions of people then you want to use all of these tools you want to be told it's like no you've screwed up here here and here and that does require kind of an ego check about things where you have to to be open to the fact that everything that you're doing is just littered with flaws it's not that oh you occasionally have a bad day it's just whatever stream of code you output there is going to be a statistical regularity of things that you just make mistakes on and i'm and i do think there's the whole argument about test driven design and unit testing versus kind of analysis and different things i am more in favor of the analysis and the stuff that just like you can't run your program until you fix this rather than you can run it and hopefully a unit test will catch it in some way yeah in my private code i have asserts everywhere yeah uh it's just there's something pleasant to me pleasurable to me about sort of the dictatorial rule of like this should be true at this point in too many times i've made mistakes that shouldn't have been made and i would assume i would i wouldn't be",
        "start": "01:04:23",
        "duration": 208.16099999999997,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "the kind of person that would make that mistake but i keep making that mistake therefore and assert really catches me uh really helps all the time so my co i would say like 10 to 20 of my private code just for personal use is probably a certain and they're active comments one of those things in theory they don't they don't make any difference to the program and if it was all operating the way you expected it would be then i they will never fire but even if you have it right and you wrote the code right initially then circumstances change the world outside your program changes and in fact that's that's one of the things where i'm kind of fond in a lot of cases of static array size declarations where i went through this period where it's like okay now we have general collection classes we should just make everything variable i because i had this history of in the early days you get doom which had some fixed limits on it then everybody started making crazier and crazier things and they kept bumping up the different limits this many lines this many sectors uh and it seemed like a good idea well we should just make this completely generic it can go kind of go up to whatever and there's cases where that's the right thing to do but it also the other aspect of the world changing around you is it's good to be informed when the world has changed more than you thought it would and if you've got a continuously growing collection you're never going to find out you might have this quadratic slowdown on something where you thought oh i'm only ever going to have a handful of these but something changes and there's a new design style and all of a sudden you've got 10 000 of them so i kind of like in many cases picking a number some you know nice round power of two number and setting it up in there and having an assert saying",
        "start": "01:06:07",
        "duration": 204.6399999999999,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "it's like hey you hit the you hit this limit you should probably think are the choices that you've made around all of this still relevant if somebody's using 10 times more than you thought they would yeah this code was originally written with this kind of world view with this kind of set of constraints you were you were thinking of the world in this way if something breaks that means you got to rethink the initial stuff and that's it's nice for it to afford for it to do that is there any stuff like uh keyboard or monitors i'm fairly pedestrian on a lot of that where i i did move to triple monitors like in the last several years ago i had been dual monitor for a very long time and i am and it was one of those things where probably years later than i should have i'm just like well the video cards now generally have three output ports i should just put the third monitor up there that's been a that's been a pure win i've been very happy with that but no i don't have fancy keyboard or mouse or anything really the key things is an ide that has uh helpful debuggers has helpful tools so it's not the emax vim route and then diet coke yeah so i did spend you know i spent uh one of my week-long retreats where i'm like okay i'm gonna make myself use uh is actually classic vi which i know people will say you should never have done that you should have just used vim directly but you know i gave it the good try it's like okay i'm being in kind of classic unix developer mode here and i worked for a week on it i used anki to like teach myself the the different little key combinations for things like that and in the end it was just like all right this was kind of like my civil war reenactment phase you know it's like i'm going out there doing it like they used to in the old days and it was kind of",
        "start": "01:07:49",
        "duration": 206.56000000000006,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "fun in that regard so many people right now screaming as they're listening to this so again the out is that this was not modern vim but still i yes i was very happy to get back to my visual studio at the end yeah i'm actually i struggle with this a lot because so use a kinesis keyboard and um i use emacs primarily and i i feel like i can exactly as you said i can understand the code i can navigate the code there's a lot of stuff you could build within emacs with using lisp you can customize a lot of things for yourself to help you uh introspect the code like to help you understand the code and visualize different aspects of the call you can even run debuggers but it's it's work and uh the world moves past you and the better and better ideas are constantly being built and that that puts a kind of i need to take the same kind of retreat as you're talking about but now i'm still fighting the civil war i need to kind of move into the 21st century and it does seem like the world is or a large chunk of the world is moving towards visual studio code which is kind of interesting to me against the javascript ecosystem on the one hand and ids are one of those things that you want to be infinitely fast you want them to just kind of immediately respond and like i mean heck i've got there's someone i know i'm an old school game dev guy that still uses visual studio six and on a modern computer everything is just absolutely instant on something like that because it was made to work on a computer that's ten thousand or a hundred thousand times slower so just everything happens immediately and all the modern systems just feel you know they feel so crufty when it's like oh why is this refreshing the screen and moving around and updating",
        "start": "01:09:32",
        "duration": 211.039,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "over here and something blinks down there and you should update this and there's you know there there are things that we've lost with that incredible flexibility but uh lots of people get tons of value from it and i am super happy that that seems to be winning over even a lot of the old vim and emacs people that they're kind of like hey visual studio codes maybe you know not so bad i am that may be the final peacekeeping solution where everybody is reasonably happy with i with something like that so can you explain what a dot plan file is and what role that played in your life does it still continue to play a role back in the early early days of id software uh one of our big things that was unique with what we did is i had adopted next stations or kind of next step systems from i steve jobs is out in the out in the woods away from apple company and i they were basically it was kind of interesting because i did not really have a background with the unix system so many of the people they get immersed in that in college and i you know and that's you know that sets a lot of cultural expectations for them and i didn't have any of that uh but i knew that my background was i was a huge apple ii fanboy i'm i was always a little suspicious of the mac i was not really what i what kind of i wanted to to go with but when steve jobs left apple and started next uh this computer did just seem like one of those amazing things from the future where it had all of this cool stuff in it and we were still back in those days working on dos everything blew up you had reset buttons because your computer would just freeze if you're doing development work literally dozens of times a day your computer was",
        "start": "01:11:18",
        "duration": 203.841,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "just rebooting constantly and so this idea of yes any of the the unix workstations would have given a stable development platform where you don't crash and reboot all the time but next also had this really amazing graphical interface and it was great for building tools and it used uh objective c as the kind of an interesting oh wow dead interesting next was unix-based it said objective-c so it has a lot of the elements that became mac i mean the kind of reverse acquisition of apple by next where that took over and became what uh what the modern mac system is and to find some of the developer um like uh the tools and the whole community yeah you've still got if you're programming on apple stuff now there's still all these ns somethings which was originally next step objects of different kinds of things but one of the the aspects of those those unix systems was they had this notion of a dot plan file where you know a dot file is a you know an invisible file you unless usually in your home directory or something and there was a trivial server running on most unix systems at the time that i that when somebody ran a trivial little command called finger you could do finger and then somebody's address it could be anywhere on the internet if you were connected correctly then all that server would do was read the the dot plan file in that user's home directory and then just spit it out to you and originally the idea was that could be whether you're on vacation what your current project was it's supposed to be like the plan of what you're doing and people would use it for you know various purposes but all it did was dump that file over the to the terminal of whoever issued the the finger command and you know at one point i started just keeping a list of what i was doing in",
        "start": "01:13:00",
        "duration": 215.67799999999994,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "there which would be what i was working on in the day and i would have this little syntax i kind of got to myself about uh here's something that i'm working on i put a star when i finish it i could have a few other little bits of punctuation and at the time it was it started off as being just like my to-do list and it would be these trivial obscure little things like i you know fixed something with collision detection code made imp fireball do something different and just little one-liners that people that were following the games could kind of decipher but i did wind up starting to write much more in-depth things i would have little notes of thoughts and insights and then i would eventually start having little essays i would sometimes dump into the dot plan files interspersed with the work logs of things that i was doing so in some ways it was like a super early proto blog where i was just kind of dumping out what i was working on but it was interesting enough that there were a lot of people that uh that were interested in this so most of the people didn't have unix workstations so there were the websites uh back in the day that would follow the doom and quake development that would i would basically make a little service that would go grab all the changes and then people could just get it with a web browser and there was a period where like all of the little kind of dallas gaming diaspora of people that were at all in that orbit there were a couple dozen plan files going on which was and this was some years before blogging really became kind of a thing and it was kind of a i'm a premonition of sort of the way things would go and there was it's all been collected it's available online in different places and it's kind",
        "start": "01:14:48",
        "duration": 198.40200000000007,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "of fun to go back and look through what i was thinking uh what i was doing in the different areas have you had a chance to look back is there some interesting very low level specific to do items maybe things you've never completed all that kind of stuff and high level philosophical essay type of stuff uh there's some yeah there's some good stuff on both where a lot of it was low-level nitpicky details about game dev and i'm you know i've learned enough things where there's no project that i worked on that i couldn't go back and do a better job on now i mean you just you learn things hopefully if you're doing it right you learn things as you get older and you should be able to do a better job at all of the early things there's stuff in wolfenstein doom quake that's like oh clearly i could go back and do a better job at this whether it's something in the rendering engine side or how i implemented the the monster behaviors or managed resources do you see the flaws in your thinking now looking back yeah i do i mean sometimes i'll get the you know i'll look at it and say yeah i had a pretty clear view of i was doing good work there and i haven't really hit the point where there was another programmer graham devine who was i he had worked at id and seventh guest and and he made some comment one time where he said he looked back at some of his old notes he was like wow i was really smart back then and i i don't hit that so much where i mean i look at it and i always know that yeah there's all the you know with aging you get certain changes in in how you you're able to work problems but all of the problems that i've worked i i'm you know i'm sure that i could do a better job on all of them oh wow so you can still step right in if you could travel back in",
        "start": "01:16:27",
        "duration": 203.51999999999995,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "time and talk to that guy you would teach him a few things yeah absolutely that's awesome um what about the high level philosophical stuff is there some insights that stand out that you remember there's things that that i was understanding about development and i'm you know in the industry and so on that were in a in a more primitive stage where i am i definitely learned a lot more in the later years about business and organization and team structure there were i mean there were definitely things that i was not the best person or even a very good person about managing like how a team should operate internally how people should work together i was just i'm you know the just get out of my way and let me work on the code and do this and more and more i've learned how in the larger scheme of things how sometimes relatively unimportant some of those things are where it is this user value generation that's the the overarching importance for all of that and i i didn't necessarily have my eye on that ball correctly through a lot of my you know my earlier years and there's things that you know i could have i could have gotten more out of people handling things in different ways i am you know i could have made you know in some ways more successful products by following things in different ways there's mistakes that we made that we couldn't really have have known how things would have worked out but it was interesting to see in later years companies like activision showing that hey you really can just do the same game make it better every year and you can look at that from a negative standpoint and say it's like oh that's",
        "start": "01:18:09",
        "duration": 200.88,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "just being derivative and all that but if you step back again and say it's like no are the people buying it still enjoying it are they enjoying it more than what they might have bought otherwise and you can say no that's that's actually a great value creation engine to do that if you're in a position where you can i you know don't be forced into reinventing everything just because you think that you need to um you know lots of things about business and team stuff that could be done better but the technical work the kind of technical visionary type stuff that i late i laid out i still feel pretty good about there are some classic old ones about my defending of opengl versus d3d i'm which uh turned out to be one of the more probably important momentous things there where it never it was always a rearguard action on windows where microsoft was just not going to let that win but when i look back on it now that fight to keep opengl relevant for a number of years there meant that opengl was there when mobile started happening and opengl es was the thing that drove all of the acceleration of the mobile industry and it's really only in the last few years as apple's moved to metal and some of the other companies have moved to vulcan that that's moved away but really stepping back and looking at it it's like yeah i sold tens of millions of games for different things but billions and billions of devices wound up with an appropriate capable graphics api due in no small part to me thinking that that was really important that we not just i you know give up and use microsoft's um at that time really terrible api you",
        "start": "01:19:49",
        "duration": 205.35899999999998,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "know the thing about microsoft is the apis don't stay terrible they were terrible at the start but a few versions on they were actually quite good and there was a completely fair argument to be made that by the time dx9 was out it was probably a better programming environment than opengl but it was still a wonderful good thing that we had an open standard that could show up on linux and android and ios eventually webgl still to this day so uh that was that was one that would be on my greatest hits list of things that that i got impacted on billions of devices yes so let's talk about it can you tell the origin story of its software again one of the greatest game developer companies ever it created wolfenstein 3d games that define my life also in many ways as a thing that made me realize what computers are capable of in terms of graphics in terms of performance it just unlocks something deep um in me and understanding what these machines are all about those games can do that so wolfenstein 3d doom quake and uh just all the incredible engineering innovation that went into that so how did it all start so i'll caveat up front that i usually don't consider myself the the historian of the software side of things i usually do i kind of point people at john romero for stories about the early days where i you know i've never been like i've commented that i'm a remarkably unsentimental person in some ways where i don't really spend a lot of time unless i'm explicitly prodded to go back and and think about the early days of things and i didn't i i didn't necessarily make the effort to archive everything exactly in my brain and the more that i work on machine learning and ai and the aspects of memory and how when you go",
        "start": "01:21:32",
        "duration": 218.88099999999991,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "back and polish certain things it's not necessarily exactly the way it happened but you know having said all of that from from my view the way everything happened that led up to that was uh after i was an adult and kind of taking a few college classes deciding to drop out i was doing i was hard scrabble contract programming work really struggling to kind of keep groceries and pay my rent and things and the company that i was doing the most work for was a company called soft disk publishing which had the sounds bizarre now business model of monthly subscription software you know before there was an internet that people could connect to and get software you would pay you know a certain amount and every month they would send you a disk that had some random software on it and people that were into computers thought this was kind of cool and they had different ones for the apple ii the the 2gs the pc the mac the uh amiga lots of different things here so quirky little business but i was doing a lot of contract programming for them where i'd write tiny little games and sell them for 300 and one of the things that that i was doing again to keep my head above water here was i decided that i could make one program and i could port it to multiple systems so i would write a game like dark designs or catacombs and i would develop it on the apple ii the 2gs and the ibm pc which apparently was the thing that really kind of piqued the attention of the the people working down there like j wilbur was my primary editor and tom hall was a secondary editor and they kept asking me it's like hey you should come down and work for us here and i i pushed it off a couple times because i was really enjoying my freedom of kind of being off on my own even if i was barely getting by i loved it i was doing nothing but programming all day",
        "start": "01:23:21",
        "duration": 232.16000000000003,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "but i did have enough close scrapes with like damn i'm just really out of money that maybe i should um get an actual job rather than contracting these kind of one at a time things and and j wilbur was great he was like fedexing me the checks when i would need them i to kind of get over whatever hump i was at so i took the i finally took them up on their offer to come down to shreveport louisiana i was in kansas city at the time drove down um to through the ozarks and everything down to louisiana and saw the soft disk offices went through talked to a bunch of people met the people i had been working with remotely at that time but the most important thing for me was i met two programmers there john romero and lane roth that for the first time ever i had met programmers that knew more cool stuff than i did where the world was just different back then i was in kansas city it was one of those smartest kid in the school does all the computer stuff the teachers don't have anything to teach him but all i had to learn from was these few books at the library it was not much at all and there were some aspects of programming that were kind of black magic to me like it's like oh he knows how to format a track on i am you know on a low-level drive programming interface and this was i was still not at all sure i was going to take the job but i met these awesome programmers that were doing cool stuff and when romero had worked at origin systems and he had done like you know so many different games ahead of time that i did kind of quickly decides like yeah i'll go take the job down there and i settled down there moved in and started working on more little projects and the first kind of",
        "start": "01:25:17",
        "duration": 206.80000000000004,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "big change that happened down there was the company wanted to make a gaming focused a pc gaming focused subscription uh just like all their others the same formula that they used for everything pay a monthly fee and you'll get a disc with one or two games just every month and no choice in what you get but we think it'll be fun and that was the model they were comfortable with and said all right we're going to start this gamer's edge department and all of us that were interested in that like me romero i'm tom hall was kind of helping us from from his side of things jay would peek in and we had a few other programmers uh working with us at the time and we were going to to just start making games just the same model i am and we dived in and it was fantastic you have to make new games every month every month yeah and this in retrospect looking back at it that sense that i had done all this contract programming and john romero had done like far more of this where he had done one of his teaching himself efforts was he made a game for every letter of the alphabet it's that sense of like i'm just gonna go make 26 different games give them a different theme and you learn so much when you go through and you cr crank these things out like on a bi-weekly monthly basis something starts to finish so it's not like a night just an idea it's not just you from from the very beginning to the very end it's done it has to be done there's no delaying it's done and you've got deadlines and that kind of uh rapid iteration pressure cooker environment was super important for all of us developing the skills that i you know that brought us to where we eventually went to i mean people would say like like in the history of the beatles like it wasn't them being the beatles it was them playing all of these other uh you know early works that that opportunity to craft all of their skills before they",
        "start": "01:27:01",
        "duration": 215.83900000000003,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "were famous that was very critical to their later successes and i think there's a lot of that here where we did these games that nobody remembers uh lots of little things that contributed to building up the skill set for the things that eventually did make us famous yeah dostoevsky wrote the gambler i had to write it in a month just make money and nobody remembers that probably because he had to figure out because it's literally he he didn't have enough time to write it fast enough so to come up with hacks actually literally but it again comes down to that point where pressure and limitation of resources is surprisingly important and it's counter-intuitive in a lot of ways where you just think that if you've got all the time in the world and you've got all the resources in the world of course you're going to get something better but sometimes it really does work out that the you know innovations mother necessity and you know where you can are yeah resource constraints and you have to do things when you don't have a choice it's surprising what you can do is there any good games written in that time would you say some of them are still fun to go back and play where you get the they were they were all about kind of the more modern term is game feel about how just the exact feel that things it's not the grand strategy of the design but how running and jumping and shooting and those things i feel in the in the moment and some of those are still if you sat down at them you kind of go it's a little bit different it doesn't have the same movement feel but you move over and you're like bang jump bang it's like hey that's kind of cool still so you can get lost in the rhythm of the game like the the is that what you mean by feel",
        "start": "01:28:48",
        "duration": 197.44100000000003,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "just like uh there's something about it that pulls you in nowadays again people talk about compulsion loops and things where it's that i am that sense of exactly what you're doing what your fingers are doing on the keyboard what your eyes are seeing and there are going to be these sequences of things grab the loot shoot the monster jump over the obstacle get to the end of the level these are eternal aspects of game design in a lot of ways but there are better and worse ways to do all of them and we did so many of these games that it was i we got a lot of practice with it so one of the kind of weird things that was happening at this time is john romero was getting some uh some strange fan mail and back in the days this is before email so we literally got letters sometimes and telling him it's like oh i want to talk to you about your games i wanna reached out different things and eventually it turned out that these were all coming from scott miller at apogee software and he was reaching out through he didn't think he could contact john directly that he would get intercepted so he was trying to get him to contact him through like back channel fan mail because he basically was saying hey i'm making all this money on shareware games i want you to make shareware games because he had seen some of the the games that romero had done and you know we looked at uh scott miller's games and we didn't think they were very good i am we're like that can't be making the kind of money that he's saying he's making 10 grand or something i am off of this game and we really thought that he was full of that it was a lie trying to get to get him into this but so that was kind of going on at i am you know at one level he was",
        "start": "01:30:27",
        "duration": 199.76000000000002,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "and it was funny the moment when romero realized that he had some of these letters pinned up on his wall of like all of his fans and then we noticed that they all had the same return address with different names on them which was a little bit of a two-edged sword there trying to figure out the puzzle laid off yeah before him yeah what happened after i kind of coincident with that was i was working on a lot of the new technologies where uh i was now full on the ibm pc for the first time where i was really a long hold out on apple ii forever and i you know i loved my apple it was the computer i always wished i had when i was growing up and when i finally did have one i was i was kind of clinging on to that well past it sort of good used by the best computer ever made would you say um i wouldn't make judgments like that about it but it was positioned in such a way especially in the school systems that it impacted a whole lot of american programmers at least where there was programs that the apple twos got into the schools and they had enough capability that lots of interesting things happened with them you know in europe it was different you had your amigas and ataris and you know um acorns in the uk and things that that had different things but in the united states it was probably the apple ii made the most impact for a lot of programmers of my generation but so i was really digging into the ibm and this was even more so with the total focus because i had moved to another city where i didn't know anybody that i wasn't working with i had a little apartment and then at soft disk again the things that that drew me to it i had a couple programmers that knew more than i did uh and they had a library they had a set of books and a set of magazines they had a couple years of magazines the old dr dobbs journal and all of these",
        "start": "01:32:07",
        "duration": 204.16000000000003,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "magazines that had information about things and so i was just in total immersion mode it was eat breathe sleep computer programming particularly the ibm for everything that i was doing and i was digging into a lot of these low-level hardware details that people weren't usually paying attention to the way the the ibm ega cards worked um which was fun for me i hadn't had experience with things at that level and back then you could get hardware documentation just down at the register levels this is where the crtc register is this is how the the color registers work and how the different things are applied and they were designed for a certain reason they were designed for an application they were had an intended use in mind but i was starting to look at other ways that they could perhaps be exploited that they weren't initially intended for because you're coming on like uh first of all what operating system was there what what instruction set was it like what what what are the what are we talking about so this was dawson x86 so 16-bit uh 8086 the 286s were there and 386's existed they were rare uh we had a couple for our development systems but uh we were still targeting the more broad i it was all dos 16-bit um none of this was kind of dos extenders and things how different is it from the systems of today's it's kind of a precursor that's similar very little if you open up command.exe on or com on windows you see some of the remnants of all of that but it was a different world it was the 640k is enough world and nothing was protected it crashed all the time you had tsrs or terminate and stay resident hacks on top of things that would cause configuration problems all the hardware was manually configured in your auto exec so it was a very different world but the code is still the same similar you would say you",
        "start": "01:33:50",
        "duration": 223.44,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "could still write it my earliest code there was written in pascal that was what i had learned i am kind of an earlier point so between basic and c plus plus there's pascal so when basic assembly language um some of my yeah my intermediate stuff was well you had to for performance basic was just too slow so most of the work that i was doing as a contract programmer in my teenage years was uh was assembly language but then i wrote games in assembly yeah complete games in assembly language and it's thousands and thousands of lines of three-letter acronyms for the the instructions that's you don't earn the once again greatest programmer ever label without being able to eradicate an assembly okay that's again everybody wrote there everybody serious wrote their games in assembly language it was kind of serious you see what he said yeah everybody's serious yeah it was an outlier to use uh pascal a little bit where there was one famous program called wizardry it was like one of the great early role-playing games that was written in pascal but it was almost nothing used pascal there but i did learn pascal and i remember doing all of my like to this day i sketch in data structures when i'm thinking about something i'll you know i'll i'll open up a file and i'll start writing struct definitions for how data is going to be laid out and pascal was kind of formative to that because i remember designing my rpgs in pascal record structures and things like that and so i had i've gotten the pascal compiler for the apple 2gs that i could work on and the first ibm game that i developed i did in pascal and and that's actually kind of an interesting story again talking about the constraints and resources where i had an apple 2gs i didn't have an ibm pc i wanted to port my applications to ibm because i thought i could make more money on it so what i",
        "start": "01:35:41",
        "duration": 213.359,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "wound up doing is i rented a pc for a week and bought a copy of turbo pascal and so i had a hard one week and this was cutting into what minimal profit margin i had there but i had this computer for a week i had to get my program ported before i had to return the pc yeah and that was kind of what the first thing that i had done on the ibm pc and what led me to the taking the job at soft disk and turbo pascal uh how's that different from regular pascal is a different compiler or something like that so it was uh it was a product of borland which before microsoft kind of killed them they were they were the hot stuff developer tools company yeah borland turbo pascal and turbo c and turbo prologue i mean all the different things but what they did was they took a supremely pragmatic approach of making something useful it was one of these great examples where pascal was an academic language and you had things like the ucsdp system that wizardry was actually written in that they did they did manage to make a game with that but it was not a super practical system well turbo pascal was it was called turbo because it was blazingly fast to compile i mean really ridiculously 10 to 20 times faster than most other compilers at the time but it also had very pragmatic access to look you can just poke at the hardware in these different ways and we have libraries that let you do things and it was a pretty good it was a perfectly good way to write games and this is one of those things where people have talked about different paths that computer development could have taken where c took over the world for uh reasons that came out of unix and eventually linux and and that was not a foregone conclusion at all and people can make real reasoned rational arguments that",
        "start": "01:37:27",
        "duration": 205.041,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "the world might have been better if it had gone a pascal route i'm somewhat agnostic on that where i do know from experience it was perfectly good enough to do uh do that and it had some fundamental improvements like it had range checked arrays as an option there which could avoid many of c's real hazards that happened in a security space but c1 they were basically operating at about the same level of abstraction it was a systems programming language but visa pascal had more emphasis on data structures i actually i um in the in the tree of languages dipascal come before sea did it they were primarily contemporaneous so pascal's lineage went to modula 2 and eventually oberon which was another nicholas word kind of experimental language but they were all good enough at that level now some of the classic academic-oriented pascals were just missing fundamental things like oh you can't access this core system thing because we're just using it to teach students but turbo pascal showed that only modest changes to it really did make it a completely capable language and it had some reasons why you could implement it as a single pass compiler so it could be way way faster although less scope for optimizations if you do it that way uh and it did have some range checking options it had a little bit better typing capability you'd have properly typed enum sorts of things and other stuff that c lacked but you know c was also clearly good enough and it wound up with a huge inertia from the unix ecosystem and everything with that garbage collection no it was not garbage collected same kind of thing same manual so you could still have your use after freeze and all those other problems but over um just getting rid of array overruns at least if you were",
        "start": "01:39:10",
        "duration": 206.87999999999997,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "compiled with that debugging option certainly would have avoided a lot of problems and could have a lot of benefits but so anyways that was the next thing i had to learn c because c was where it seemed like most of the most of the things were going so i abandoned pascal and i started working in c i started hacking on these hardware things dealing with uh you know the graphics controllers and the ega systems and what we most wanted to do so at that time we had uh we were sitting in our darkened office playing all the the different console video games we're figuring out what do we want to kind of what games do we want to make for our gamer's edge product there and so we had one of the one of the first super nintendos sitting there and we had a an older nintendo looking at all those games and the core thing that those consoles did that you just didn't get on the pc games was this ability to have a massive scrolling world where most of the games that you would make on the pc uh and early earlier personal computers would be a static screen you move little things around on it and you interact like that maybe you go to additional screens as you know as you move but arcade games and consoles had this wonderful ability to just have a big world that you're slowly moving your window through and that was for those types of games the kind of action exploration adventure games that was a super super important thing and pc games just didn't do that and what i had had come across was a couple different techniques for implementing that on the pc and they're not hard complicated things when i explain them now they're they're they're pretty straightforward but just nobody was doing you sound like einstein describing his five papers is pretty",
        "start": "01:40:54",
        "duration": 196.55999999999997,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "straightforward i understand but it they're nevertheless revolutionary so side scrolling is a game changer yeah it's scrolling genius invention vertical and some of the consoles had different limitations about you could do one but not the other and i and there were similar things going on as advancements even in the console space where you'd have like the original mario game was uh like just horizontal scrolling and then later mario games added vertical aspects to it and different things that uh that you were doing to explore you know kind of expand the capabilities there and so much of the early game design for decades was removing limitations letting you do things that you envisioned as a designer you wanted the player to experience but the hardware just couldn't really uh or you didn't know how to make it happen it felt impossible you can imagine that you want to create a like this big world through which you can side scroll like through which you can walk uh and then you ask yourself a question how do i actually build that in a way that's uh like the latency is low enough uh the hardware can actually deliver that in such a way that's a compelling yeah and we knew what we wanted to do because we were we were playing all of these console games playing all these nintendo games and arcade games clearly there was a whole world of awesome things there that we just couldn't do on the pc at least initially because every programmer can tell it's like if you want to scroll you can just redraw the whole screen but then it turns out well you're going five frames per second i that's not an interactive fun experience you want to be going 30 or 60 frames per second or something and it just didn't feel like that was possible it felt like the pcs had to get five times faster for you to make a playable game there",
        "start": "01:42:32",
        "duration": 199.11899999999994,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "and interestingly i wound up with two completely different solutions for the scrolling problem and this is i'm this is a theme that runs through everything where all of these big technical advancements it turns out there's always a couple different ways of doing them and it's not like you found the one true way of doing it and we'll see this as we go into 3d games and things later but so the scrolling the first set of scrolling tricks that i got was there was the hardware had this ability to uh you could shift like inside the window of memory i am so the ega cards at the time had 256 kilobytes of memory and it was awkwardly set up in this planar format where uh instead of having 256 or you know 24 million colors you had 16 colors which is four bits so you had four bit planes 64k apiece of course 64k is a nice round number for 16-bit addressing so your graphics card had a 16-bit window that you could look at and you could tell it to start the video scan out anywhere inside there so there were a couple games that had taken this approach if you could make a two by two screen or a one by four screen and you could do scrolling really easily like that you could just lay it all out and just pan around there but you just couldn't make it any bigger because that's all the memory that was there uh the first insight to the scrolling that i had was well if we make a screen that's just one tile larger you know in the we usually had tiles that were 16 pixels by 16 pixels the little classic mario block that you run into lots of art gets drawn that way and your screen is a certain number of tiles but if you had one little buffer region uh outside of that you could easily pan around inside that 16 pixel region that could be perfectly smooth but then what happens if you get to the edge and you want to keep going",
        "start": "01:44:12",
        "duration": 228.32100000000003,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "the first way we did scrolling was what i called adaptive tile refresh which was really just a matter of you get to the edge and then you go back to the original point and then only change the tiles that have actually that are different between where it was in most of the games at the time if you think about sort of your classic super mario brothers game you've got big fields of blue sky uh long rows of the same brick texture and there's a lot of commonality it's kind of like a data compression thing if you take the screen and you set it down on top of each other in general only about 10 percent of the tiles were actually different there so this was a way to go ahead and say well i'm going to move it back and then i'm only going to change those 10 20 uh whatever percent tiles there and that meant that it was essentially five times faster than if you were redrawing all of the tiles and that worked well enough for us to do a bunch of these games for i am for gamer's edge we had a lot of these scrolling games like slordax and shadow knights and things like that that we were cranking out at this high rate that had this scrolling effect on it and it worked well enough there were design challenges there where if you made the worst case if you made a checkerboard over the entire screen you scroll over one and every single tile changes and your frame rate's now five frames per second because it had to redraw everything so the designers had a little bit that they had to worry about they had to make these relatively plain looking levels but it was still pretty magical it was something that we hadn't seen before and uh the first thing that we wound up doing with that was i had just gotten this working and tom hall was sitting",
        "start": "01:46:05",
        "duration": 198.79999999999998,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "there with me and we were looking over at our super nintendo on the side there with super mario 3 running and we had the technology we had the tools set up there and we stayed up all night and we basically cloned the first level of super mario brothers performance wise as well yeah and so it and we had our little character running and jumping in there it was you know it wasn't uh it was close to pixel accurate as far as all the uh the backgrounds and everything but the gaming was just stuff that we cobbled together from previous games that i had written i just kind of like really kit-bashed the whole thing together to make this demo and that was one of the rare cases when i said i i don't usually do these all-night programming things there's probably only two memorable ones that i can think about you know one was the all-nighter to go ahead and get i am to get our dangerous dave and copyright infringement is how we titled it because we had a game called dangerous dave was you know running around with the shotgun shooting things uh and we were just taking our most beloved game at the time there the super mario 3 and sort of sticking dave inside that with this new scrolling technology that was going perfectly smooth for i am you know for them as it ran and tom and i just kind of literally the next morning you know kind of left and we left a disc on i you know on the desk for john romero and jay wilbur to see and just said run this and we eventually made it back in later in the day and it was you know like they grabbed us and pulled us in you know pulled us into the room and that was the point where they were like we got to do something with this you know we're we're going to make a company we're going to go make our own games where this was something that we we were able to just kind of hit them with a hammer of an experience like wow",
        "start": "01:47:45",
        "duration": 202.95999999999998,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "this is just like so much cooler than what we thought was possible there and initially we tried to get nintendo to to let us make super mario 3 on the pc that's really what we wanted to do we were like hey we can finish this it's line of sight for this will be great and we sent something to nintendo and we heard that it did get looked at in japan and they just weren't interested in that i but that's another one of those life could have gone a very different way where we could have been like nintendo's house pc team you know at that point and define the direction of you know uh wolfenstein and uh doom and quake could have been a nintendo creation yeah so at the same time that we were just doing our first scrolling demos um we reached out to scott miller at apogee and said it's like hey we do want to make some games you know these things that you think you want those are those are nothing what do you see what we can actually do now this is going to be amazing and he just like popped right up and sent a check to us where we at that point we still thought he might be a fraud that he was just lying about all of this but he was totally correct on how much money he was making with his shareware titles and this was his his kind of real brainstorm about this where shareware was this idea that software doesn't have a fixed price if you use it you send out the goodness of your heart some money to the creator and there were a couple utilities that did make some significant success like that but for the most part it didn't really work you know there wasn't much software in a pure shareware model that that was successful the apogee innovation was to take something call it shareware split it into three pieces you always made a",
        "start": "01:49:26",
        "duration": 206.79799999999997,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "trilogy and you would put the first piece out but then you buy the whole trilogy for some shareware amount which in reality it meant that the first part was a demo where you kind of like the demo went everywhere for free and you paid money to to get the whole set but it was still played as shareware and we were happy to have the first one go everywhere and it wasn't a crippled demo where the first episode of all these trilogies it was a real complete game and probably 20 times as many people played that part of it thought they had a great game had found fond memories of it but never paid us a dime but enough people were happy with that where it was really quite successful at these early games that we didn't think very much of compared to commercial quality games but they were doing really good business some fairly crude things and people it was good business people enjoyed it and it wasn't like you were taking a crap shoot on what you were getting you just played a third of the experience and you loved it enough to hand write out a check and put it in an envelope and address it and send it out to apogee to uh to get the rest of them so it was a really pretty feel-good business prospect there because everybody was happy you know they knew what they were getting i when they send it in and they would send in fan mail if you're going to the trouble of addressing a letter and i'm you know filling out an envelope you write something in it and there were just the literal bags of fan mail for the shareware um games so people loved them i should mention that for you the definition of wealth is being able to have pizza whenever you want for me there was a dream because i would play shareware games over and over the the part that's free over and over and it was very deeply fulfilling experience but you know i i",
        "start": "01:51:10",
        "duration": 214.881,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "dreamed of a time when i could actually afford the full experience and this is kind of this dreamland beyond beyond the horizon when would you could you could find out what else is there in some sense even just playing the shareware was um it's the limitation of that you know life is is limited eventually we all die in that way shareware was like somehow really fulfilling to have this kind of mysterious thing beyond what's free always there it's kind of um i don't know that was maybe it's because a part of my childhood just playing shareware games that was a really fulfilling experience it's so interesting how that model still brought joy to so many people yeah 20x people that played it yeah i felt very good about that and i would run into people it's like that would say oh i love that game you know that you had early on commander keen whatever and um and no they they meant just the first episode that they got to see everyone the crap out of communicating and that was that was all good yeah yeah but so we were in this position where scott miller was just fronting us cash and saying yeah make you know make a game but i we did not properly pull the trigger and say all right we're going to we're quitting our jobs we were like we're going to do both we're going to keep working at soft disk working on this and then we're going to go ahead and make a new game for apogee at the same time and this eventually did lead to some legal problems and we had we had trouble it all got worked out in the end but it was not a good call at the time there and your legal mind at the time was not stellar you you were not thinking uh in terms of in legal no i i definitely wasn't none",
        "start": "01:52:57",
        "duration": 209.76000000000002,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "of us were uh and in hindsight yeah it's like how did we think we were gonna get away with like even using our work computers to write right software for you know our our breakaway new company it was not a good plan how did commander keen come to be so the design process we would start from we had some idea of what we wanted to do we wanted to do a mario like game it was going to be a side scroller i was going to use the technology we we had some sense of what it would have to look like because of the limitations of this adaptive tile refresh technology it had to have fields of relatively constant tiles you couldn't just paint up a background and then move that around i the early design or all the design for commander keen really came from tom hall where he was you know kind of the main creative mind for the the early id software stuff where we had an interesting division of things where tom was all creative in design i was all programming john romero was an interesting bridge where he was both a very good programmer and also a very good designer and artist and kind of straddled between the areas but commander keane was very much tom hall's baby and he came up with all the design and back story for the different things of kind of a mad scientist little kid with i am you know building a a rocket ship and a zap gun and uh visiting alien worlds and doing all this that the background that we lay the game inside of and there's not a whole lot to any of these things you know design for us was always just what we needed to do to make the game that was going to be so much fun to play and we made our we laid out our first trilogy of games you know the shareware formula is going to be three pieces we",
        "start": "01:54:44",
        "duration": 211.36099999999996,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "make entertain one two and three and we just really started uh busting on all that work and it went together really quickly it was like three months or something that while we were still making games every month for uh for gamer's edge we were sharing technology between that i'd write a bunch of code for this and we'd just kind of use it for both again not a particularly good idea there that had consequences for us but in three months we got our first our first game out and all of a sudden it was three times as successful as the most successful thing apogee had had before and we were making like thirty thousand dollars a month immediately from the commander keen stuff and that was again a surprise to us it was more than we thought that was gonna uh that that was gonna make and we said well we're gonna certainly roll into another set of titles from this and in that three months i had come up with a much better way of doing the scrolling technology that was not the adaptive tile refresh which in some ways was even simpler and these things so many of the great ideas of technology are things that are back of the envelope designs i make this comment about modern machine learning where all the things that are really important practically in the last decade are each of them fits on the back of an envelope there are these simple little things they're not super dense hard to understand technologies and so the the second scrolling trick was just a matter of like okay we know we've got this 64k window and the question was always like well you could make a two by two but you can't go off the edge uh but i finally asked well what actually happens if you just go off the edge if you take your start and you say it's like okay i can move over i'm scrolling i can move over i can move",
        "start": "01:56:29",
        "duration": 211.59900000000002,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "down i'm scrolling i get to what should be the bottom of the memory window it's like well what if i just keep going and i say i'm going to start at i you know what happens if i start at fffe at the very end of the the 64k block and it turns out it just wraps back around to the top of the block and i'm like oh well this makes everything easy you can just scroll the screen everywhere and all you have to draw is just one new line of tiles which everything you expose it might be unaligned off various parts of the of the screen memory but it just works that no longer had the problem of you had to have fields of the similar colors because it doesn't matter what you're doing you could be having a completely unique world and you're just drawing the new strip as it comes on but it might be like you said unaligned so it can be all over the place yes and it turns out it doesn't matter i would have two page flipped screens as long as they didn't overlap they moved in series through this uh two-dimensional window of graphics and that was one of those like well this is so simple this just i this just works it's faster i'm there it seemed like there was no downside funny thing was i it turned out after we shipped titles with this there were what they called uh super vga cards the cards that would allow higher resolutions and i and different features that the standard ones didn't and on some of those cards uh this was a weird compatibility quark again because nobody thought this was not what it was designed to do and some of those cards had more memory they had more than just 256k and four planes they had five 12k or a megabyte and on some of those cards i scroll my window down and then it goes into uninitialized memory that actually exists there rather than wrapping back around at the top",
        "start": "01:58:15",
        "duration": 211.19899999999998,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "and then i was in the tough position of do i have to track every single one of these and it was a mad house back then with there were 20 different video card vendors with all slightly different implementations of their non-standard functionality so either i needed to natively program all of the the vga cards there to map in that memory and keep scrolling down through all of that or i kind of punted and took the easy solution of when you finally did run to the edge of the screen i accepted a hitch and just copied the whole screen up there so on some of those uh those cards it was a compatibility mode in the normal ones when it all worked fine everything was just beautifully smooth but if you had one of those cards where it did not wrap the way i wanted it to you'd be scrolling around scrolling around and then eventually you'd have a little hitch where 200 milliseconds or something that was not super smooth as it froze a little bit and this was the binary thing is it one of the standard screens there's one of the weird ones the super vga ones yeah okay and so we would default to and i think that was one of those that changed over the kind of course of deployment where early on we would have a normal mode and then you would have you would enable the compatibility flag if your screen did this crazy flickery thing when you got to a certain point in the game uh and then later i think it probably got enabled by default as just more and more of the cards i kind of did not do exactly the right thing and that's the two-edged sword of doing unconventional things with technology where you can find something that nobody thought about doing that kind of scrolling trick when they set up those cards uh but the fact that nobody thought that was the primary reason when i was relying on that then i",
        "start": "02:00:01",
        "duration": 199.522,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "wound up being broken on some of the later cards let me uh take a bit of a tangent but uh ask about the hacker ethic because you mentioned shareawares it's an interesting world the world of people that make money the business and the people that build systems the engineers and what is the hacker ethic you've been a man of the people and you've embodied at least the part of that ethic what does it mean what did it mean to you at the time what does it mean to you today so steven levy's book hackers was a really formative book for me uh as a teenager i mean i read it several times and there was all of the great lore of the early mit era of hackers and you know ending up at the end with it kind of went through the early mit hackers and the silicon valley hardware hackers and then uh the game hackers in part three and at that time as a teenager i really was kind of bitter in some ways like i thought i was born too late i thought i missed the the window there and i really thought i belonged in that third section of that book with the game hackers and they were talking about you know the williams at sierra and origin systems with richard garriott and and it's like i really wanted to be there and i knew that was that was now a few years in the past it was i you know it was not to be but the early days especially the early mit hacker days talking a lot about this sense of uh the hacker ethic that there was this sense that it was about sharing information being good not keeping it to yourself and that it's not a zero-sum game that you you know you can share something with another programmer and it doesn't take it away from you you know you you then",
        "start": "02:01:41",
        "duration": 220.95999999999998,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "have somebody else doing something and i also think that there's an aspect of it where it's this ability to to take joy in other people's accomplishments where it's not the cutthroat bit of like i have to be first i have to be recognized as the the one that did this in some way but being able to see somebody else um do something and say holy that's amazing you know and just taking joy in the ability of something amazing that somebody else does and the the big thing that i was able to do through in software was uh this ability to eventually release the source code for most of our like all of our really seminal game titles and that was a it was a stepping stone process where we were kind of surprised early on where uh people were able to hack the existing games and of course i had experience with that i remember hacking my copies of ultima so i give myself you know 999 gold and raise my levels and you know break out the sector editor and so i was familiar with all of that so it was just it was with a smile when i started to see people doing that to our games i am you know making level editors for commander keen or hacking up wolfenstein 3d but i made the pitch internally that we should actually release our own tools for like what we did uh what we used to create the games and that was you know that was a little bit debatable about well you know will this let other will give people leg up it's always like what's that going to mean for the competition but the really hard pitch was to actually release the full source code for the games and it was a balancing act with the the other people inside the company where it's interesting how the programmers generally did get certainly i am the people that i worked closely with they",
        "start": "02:03:30",
        "duration": 218.24,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "did kind of get that hacker ethic bit where you wanted to share your code you were you were proud of it you wanted other people to take it do cool things with it but i interestingly the the broader game industry is a little more hesitant to embrace that than like the group of people that we happen to have at id software where it was always a little interesting to me seeing how a lot of people in the game modding community were very possessive of their code they did not want to share their code they wanted it to be theirs it was their you know claim to fame and that was much more like what we tended to see with artists where you know the artists understand something about credit and i you know wanting it to be known as their work and a lot of the game programmers felt a little bit more like artists than like hacker programmers in that it was about building something that maybe felt more like art to them than the the more tool-based and exploration exploration-based kind of hacking culture side of things yes so it's so interesting that this kind of fear that credit will not be sufficiently attributed to you and that's one of the things that i do bump into a lot because i i try not to go cl i mean it's easy for me to say because so much credit is heaped on me for the the id software side of things but when people come up and that they want to pick a fight and say no it's like that wasn't where first person gaming came from and you can point to you know you can point to some of like things on obscure titles that i was never aware of or like the old plato systems or you know each personal computer had something that was 3d ish and moving around and i'm you know and i'm happy to say it's like no i mean i saw battle zone in star wars in the arcades i had seen 3d graphics i had",
        "start": "02:05:20",
        "duration": 209.20000000000002,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "seen all these things they're i'm standing on the shoulders of lots of other people but sometimes these examples they pull out it's like i didn't know that existed i mean there i had never heard of that before then that didn't contribute to what i made but there's plenty of stuff that did and you know i i think there's good cases to be made that obviously doom and quake and wolfenstein were formative examples for what everything that came after that but i don't feel the need to go fight and say claim primacy or initial invention of anything like that but a lot of people do want to i think when you fight for the credit in that way and it does go against the hacker ethic you destroy something fundamental about the culture about the community that builds cool stuff i think credit ultimately um uh so i had this sort of um there's a famous wrestler in freestyle wrestling called uh satya and he always preached that you should just focus on the art of the wrestling and let people um write your story however they want the the the highest form of the art is just focusing on the art and that's something that is something about the the hacker ethic is just focus on building cool stuff sharing it with other cool people and credit will get assigned correctly uh in the long arc of history yeah and i generally think that's true and you've got i am you know like there's some things there there's a graphics technique that got labeled carmax reverse i am you know literally named and it turned out that i",
        "start": "02:07:05",
        "duration": 204.95999999999995,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "wasn't the first person to to figure that out like most scientific things or mathematical things you might have like oh this other person had actually done that somewhat before and then there's things that get attributed to me like the inverse square root hack that i actually didn't do i flat out that wasn't me and it's like it's weird how the memetic power of the internet i cannot you're like the point of programming yes it's just everything just gets attributed to you now even though you've never sought that the credit of things i mean but part of the the fact that the humility behind that is what uh attracts the attributions let's talk about a game you mean one of the greatest games ever made i know you could talk about doing quake and so on but to me wolfenstein 3d was like wow it blew my mind that that world like this could exist so how did wolfenstein 3d come to be in terms of the programming in terms of the design in terms of some of the memorable technical challenges um and also actually just something you haven't mentioned you know how do these ideas come to be inside your mind the adaptive side scrolling so the solutions to these technical challenges so i usually can introspectively pull back pretty detailed uh accounts of how technology solutions and design choices on my part came to be where i technically we had done two games 3d games like that before where hover tank was the first one which had flat shaded walls but did have the scaled enemies inside it and then catacombs 3d which had textured walls scaled enemies and some more some more functionality like the",
        "start": "02:08:49",
        "duration": 211.52,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "disappearing walls and some other stuff but what's really interesting from a game development standpoint is those games catacombs 3d povertank and wolfenstein they literally used the same code for a lot of the character behavior that a 2d game that i had made earlier called catacombs did where it was an overhead view game kind of like gauntlet you're running around and you can open up doors pick up items basic game stuff and the thought was that this exact same game experience just presented in a different perspective it could be literally the same game just with a different view into it would have a dramatically different impact on the players so it wasn't it wasn't a true 3d you're saying that you could kind of fake it you can like scale enemies meaning things that are farther away you can make them smaller so from the game was a 2d map like all of our games use the same tool for creation and we used the same map editor for creating keen as wolfenstein and evertank and catacombs and all this stuff so the game was a 2d grid made out of blocks and you could say well these are walls these are where the enemies start then they start moving around and these early games like catacombs you played it strictly in a 2d view it was a scrolling 2d view and that was kind of using an adaptive tile refresh at the time to be able to do something like that and then the thought that these early games all it did was take the same basic enemy logic but instead of seeing it from the god's eye view on top you were inside it and turning from side to side yawing your view and moving forwards and backwards and side to side i and it's a striking thing where you always talk",
        "start": "02:10:34",
        "duration": 203.76000000000002,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "about wanting to isolate and factor changes in values and this was one of those most pure cases there where the rest of the game changed very little it was our normal kind of change the colors on something and draw a different picture for it but it's kind of the same thing but the perspective changed in a really fundamental way and it was dramatically different i can remember the reactions where the artist adrian that had been drawing the pictures for we had a cool big troll thing in catacombs 3d and we had uh these walls that you could get a key and you could make the blocks disappear get really simple stuff blocks could either be there or not there so our idea of a door was being able to make a set of blocks just disappear and i remember the reaction where he had drawn these characters and he was slowly moving around and like people had no experience with 3d navigation it was all still keyboard we didn't even have mice set up at that time but slowly moving going up picked up a key go to a wall the wall disappears in a little animation and there's a monster like right there and he practically fell out of his chair it was just like ah and games just didn't do that you know the games were the god's eye view you were a little invested in your little guy you can be like you know happy or sad when things happen but you just did not get that kind of startle reaction you weren't interested in your face something in the back of your brain some reptile brain thing is just going oh  something just happened and that was one of those early points where it's like yeah this is going to make a difference this is going to be powerful and it's going to matter were you able to imagine that in the idea stage or no so not that exact thing so again we had cases like the arcade games battlezone",
        "start": "02:12:16",
        "duration": 200.72,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "and star wars that you could kind of see a 3d world and things coming at you and you get some sense of it but nothing had done the kind of worlds that we were doing and the sort of action based things 3d at the time was really largely about the simulation thoughts and this is something that really might have trended differently if not for the id software approach in the games where there were flight simulators there were driving simulators you had like hard driving and microsoft flight simulator and these were doing 3d and general purpose 3d and ways that were more flexible than what we were doing with our games but they were looked at as simulations they weren't trying to necessarily be fast or responsive i were letting you do kind of exciting maneuvers because they were trying to simulate reality and they were taking their cues from the big systems the evans and sutherlands and the silicon graphics that were doing things but we were taking our cues from the console and arcade games you know we wanted things that were sort of quarter eaters that were doing fast-paced things that you could smack you around rather than just smoothly gliding you from place to place so quarterly quarter and you know the funny thing is so much that that built into us that wolfenstein still had lives and you had like one of the biggest power-ups in all these games like was an extra life because you started off with three lives and you lose your lives and then it's game over and there weren't save games in most of this stuff it was it sounds almost crazy to say this but it was an innovation in doom to not have lives you know you could just play doom as long as you wanted you just restart at the the start of the level and why not this is like we we aren't trying to take people's quarters they've already paid for the",
        "start": "02:13:57",
        "duration": 207.28099999999995,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "entire game we want them to have a good time and you would have some i you know some old-timer purists that might think that there's something to the epic journey of making it to the end having to restart all the way from the beginning after a certain number of tries but now more fun is had when you just let people kind of keep trying when they're stuck rather than having to go all the way back and and learn different things so you've recommended the book game engine black book wolfenstein 3d for technical exploration of the game so looking back 30 years what are some memorable technical innovations that made this perspective shift into this world that's so immersive that scares you when a monster appears or some things you have to solve so one of the interesting things that come back to the theme of deadlines and resource constraints the the game catacombs 3d um we shipped we were supposed to be shipping this for gamer's edge on a monthly cadence and i had slipped i was actually late it slipped like six weeks because this was texture mapped walls doing stuff that i hadn't done before and at the six week point it was still kind of glitchy and buggy there were things that i knew that if you had a wall that was like almost edge on you could slide over to it and you could see some things freak out or vanish or not work and i hated that i i but i was up against the wall we had to ship the game uh it was still a lot of fun to play it was novel nobody had seen it it gave you that startle reflex uh reaction so it was worth shipping but it had these things that i knew were kind of flaky and janky and not not what i was really proud of so one of the the things that i did very differently in wolfenstein i was i went catacombs used almost a conventional thing where you",
        "start": "02:15:40",
        "duration": 213.438,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "had segments that were one-dimensional polygons basically that were clipped and uh and back-faced and done kind of like a very crude 3d engine from the professionals but i wasn't getting it done right i was not doing a good enough job i didn't really have line of sight to um to fix it right there's stuff that of course i look back it's like oh it's obvious how to do this and do the math right do your clipping right check all of this how you handle the precision but i did not know how to do that at that time the first 3d engine you wrote catacombs 3d and hover tank had been a little bit before that but that had the flat shaded walls so the texture mapping on the walls was what was bringing in some of these challenges that was uh that was hard for me and i couldn't solve it right at the time can you describe what flat shading is in texture mapping so in the the walls work solid color one of 16 colors i'm in hover tank so that's easy it's fast you just draw the solid color for everything texture mapping is what we all see today where you have an image that is stretched and distorted onto the walls or the surfaces that you're working with um and it was you know it was a long time for me to just figure out how to do that without it distorting in the wrong ways and and i did not get it all exactly right in catacombs and i i had these flaws so that was important enough to me that rather than continuing to bang my head on that when i wasn't positive i was gonna get it i went with a completely different approach for drawing for figuring out where the walls were which was a raycasting approach which i had done in catacombs 3d i had a bunch of c code trying to make this work right and it wasn't working right in wolfenstein i wound up going to a very small amount of assembly code so in some ways there should be a slower way of doing it but",
        "start": "02:17:27",
        "duration": 214.16000000000003,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "by making it a smaller amount of work that i could more tightly optimize it worked out and wolfenstein 3d was just absolutely rock solid you know it was you know nothing glitched in there the game just was pretty much flawless through all of that and i was super proud of that i'm but eventually like in the later games i went back to the more span based things where i could get more total efficiency once i really did figure out how to do it so there were two sort of key technical things to wolfenstein one was this raycasting approach which you still to this day you see people go and say let's write a raycasting engine because it's an understandable way of doing things that lets you make games very much like that so you see raycasters in javascript raycasters and python people that are are basically going and re-implementing that uh that approach to taking a tiled world and casting out into it it works pretty well but it's not the fastest way of doing it can you describe what raycasting is so you start off and you've got your screen which is 320 pixels across at the time if you haven't sized down in the window for for greater speed and at every pixel there's going to be an angle from you've got your position in the world and you're going to just run along that angle and keep going until you hit a block so up to 320 times across there it's going to throw a cast array out into the world from wherever your origin is until it runs into a wall and then it can figure out exactly where on the wall it hits the performance challenge of that is as it's going out every block it's crossing it checks is this a solid wall so that means that in like the early wolfenstein levels you're in a small jail cell going out into a small hallway it's super efficient for that because you're only stepping across three or",
        "start": "02:19:14",
        "duration": 209.28099999999998,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "four blocks but then if somebody makes a room that covers our maps we're limited to 64 by 64 blocks if you made one room that was nothing but walls at the far space it would go pretty slow because it would be stepping across 80 tile tests or something along the way by the way the physics of our universe seems to be competing this very thing so this maps nicely to the actual physics of our world yeah you get intuitive i follow a little bit of something like stephen wolfram's work on i've you know interconnected network information states of that and that's it's beyond what i can have an informed opinion on but it's interesting that people are considering things like that and have uh and have things that can back it up yeah that's yeah there's whole different sets of interesting stuff there so wolfenstein 3d had raycast something raycasting and then the other kind of key aspect was what i called compiled scalars where the idea of you saw this in the earlier classic arcade games like space harrier and stuff where you would take a picture which is normally drawn directly on the screen and then if you have the ability to make it bigger or smaller big chunky pixels or fizzly small drop sampled pixels that's the fundamental aspect of what our characters were doing in these 3d games you would have it's just like you might have drawn a tiny little character but now we can make them really big and make them really small and move it around that was the limited kind of 3d that we had for characters to make them turn there were literally eight different views of them you didn't actually have a 3d model that would rotate you just had these cardboard cutouts but that was good enough for that startled fight reaction and it was kind of what we had to do",
        "start": "02:20:58",
        "duration": 199.681,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "deal with there so a straightforward approach to do that you could just write out your doubly nested loop of i you've got your stretch factor and it's like you've got a point you stretch by a little bit it might be on the same pixel it might be on the next pixel it might have skipped a pixel um you can write that out but it's not going to be fast enough where especially you get a character for that right in your face monster covering almost the entire screen doing that with a general purpose scaling routine would have just been much too slow it would have worked when they're small characters but then it would get slower and slower as they got closer to you until right at the time when you most care about having a fast reaction time the game would be chunking down so the fastest possible way to draw pixels at that time was to i'm instead of saying i've got a general purpose i am version that can handle any scale i made i i used a program to make essentially a hundred or more separate little programs that was optimized for i will take an image and i will draw it 12 pixels tall i'll take an image i'll draw it 14 pixels tall up by every two pixels even for that so you would have the most optimized code so that in the normal case where most of the world is fairly large i like the pixels are big you know we did not have a lot of memory so in most cases that meant that you would load a pixel color and then you would store it multiple times so that was faster than even copying an image in a normal conventional case because most the time the image is expanded so instead of doing one read one write for a simple copy you might be doing one read and three or four writes",
        "start": "02:22:38",
        "duration": 200.23999999999995,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "as it got really big and that had the beneficial aspect of just when you needed the performance most when things are covering the screen it was giving you the most acceleration for that by the way were you able to uh understand this through thinking about it or were you testing like the right speed and like this again comes back to i can find the antecedents for things like this so in i'm back in the apple two days i'm the graphics were essentially single bits at a time and if you wanted to make your little spaceship if you wanted to make it smoothly go across the world if you just took the image and you drew it out at the next location you would move by seven pixels at a time so it would go chunk chunk if you wanted to make it move smoothly you actually had to make seven versions of the ship that were pre-shifted you could write a program that would shift it dynamically but on a one megahertz processor that's not going anywhere fast so if you wanted to do a smooth moving fast action game you made separate versions of each of these uh sprites now there were a few more tricks you could pull that if it still wasn't fast enough you could make a compiled shape where instead of this program that normally copies an image and says like get this byte from here store it here get this byte store this bite if you've got the memory space you could say i'm going to write the program that does nothing but draw this shape it's going to be like i'm going to load the immediate value 25 you know which is some bit pattern and then i'm going to store that at this location uh rather than loading something from memory that involved indexing registers and this other slow stuff you could go ahead and say no i'm going to hard code the exact values of all of the image right into the program now this was always a horrible trade-off there but you didn't have much memory",
        "start": "02:24:19",
        "duration": 212.16,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "and you didn't have much speed but if you had something that you wanted to go really fast you could turn it into a program and that was you know knowing about that technique is what made me think about some of these unwinding it for the pc where people that didn't come from that background were less likely to think about that i mean there's some deep parallels probably to human cognition as well there's something about optimizing and compressing the the processing of a new information that requires you to predict the possible ways in which the game or the world might unroll and you have something like compiled scalars always there so if you have like optima like you have a prediction of how the world will unroll and you have some kind of optimized data structure for that prediction and then you can modify if the world turns out to be different you can modify a slight way as far as building out techniques so much of the brain is about the associative context you know they're just when you learn something it's in the context of something else and you can have faint tiny little hints of things and i do think there are some deep things uh you know around like sparse distributed memories and boosting that's like if you can just be slightly above the noise floor of having some hint of something you can have things refined into pulling the memory back up so having a being a programmer and having a toolbox of like all of these things that things that i did in all of these previous lives of programming tasks that still matters to me about how i'm able to pull up some of these things like in that case it was something i did on the apple 2 then being relevant for the pc and i have still cases when i would when i would work on mobile development then be like okay i did",
        "start": "02:26:05",
        "duration": 203.679,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "something like this back in the the doom days but now it's a different environment but i have still had that tie i can bring it in and i can transform it into what the world needs right now and i i do think that's actually one of the very core things with human cognition and brain like i you know brain like functioning is finding these ways about you've got your brain is kind of everything everywhere all at once you know it's it is just a set of all of this stuff that is just fetched back by these queries that go into it and they can just be slightly above the noise floor with random noise in your neurons and synapses that are affecting exactly what gets pulled up so you're saying some of these very specific solutions for different games you find that there's a kernel of a deep idea that's generalizable to other to other things yeah you can't predict what it's going to be but that idea of like i called out that compiled shaders uh in the forward that i wrote for that uh the game engine black book as you know this is it's kind of an endpoint of unrolling code but that's one of those things that thinking about that and having that in your mind and i'm sure there are some programmers that you know hear about that think about it a little bit it's kind of the mind-blown moment it's like oh you can just turn all of that data into code and nowadays you know you have instruction cache issues and that's not necessarily the best idea but there are different it's an idea that has power and has probably relevance in some other areas maybe it's in a hardware point of view that there's a way you approach building hardware that has that same you don't even have to think about iterating you just bake everything all the way into it in one place what is the story of how you came to program doom what are some memorable technical",
        "start": "02:27:49",
        "duration": 195.68,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "challenges or innovations within that game so the path that we went after after wolfenstein got out and we were on this crazy arc where keen one through three more success than we thought king four through six even more success wolfenstein even more success so we were on this this crazy trajectory for things so actually our first box commercial project was the commander keen i am game but then wolfenstein was going to have a game called spear of destiny which was a commercial version 60 new levels so the rest of the team took the game engine pretty much as it was and started working on that we got new monsters but it's basically reskins of the things there and there's a really interesting aspect about that that i didn't appreciate until much much later about how wolfenstein clearly did tap out its limit about what you want to play um all the levels and a couple of our license things there was a hard creative wall that you did not really benefit much by continuing to beat on it but a game like doom and other more modern games like minecraft or something there's kind of a touring completeness level of design freedom that you get in games that wolfenstein clearly sat on one side of you know all the creative people in the world could not go and do a masterpiece just with the technology that wolfenstein had wolfenstein could do wolfenstein but you really couldn't do something crazy and different but it didn't take that much more capability to get to wolfenstein with the freeform lines and a little bit more artistic freedom to get to the point where people still announce new doom levels today all these years after without having completely tapped out the creativity how did you how did you put it touring complete yeah i turned complete design",
        "start": "02:29:27",
        "duration": 204.72,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "space designs like you know we have the kind of computational universality on a lot of things and how difficult for creativity but yeah there's things where a box can be too small but above a certain point you kind of are at the point where you you really have almost unbounded creative ability there and doom is the first time you cross that line yeah where there were thousands of doom levels created and some of them still have something new and interesting to say to the world about it is that line can you introspect what that line was is in the design space is it something about the programming uh capabilities that you were able to add to the game so the graphics fidelity was a necessary part because the block limitations in wolfenstein uh what we had right there was uh was not enough the full-scale blocks although minecraft i really did show that perhaps blocks uh stacked in 3d and at one quarter the scale of that or one-eighth in volume is then sufficient to have all of that but the the wall-sized blocks that we had in wolfenstein was too much of a creative limitation you know we licensed the technology to a few other teams none of them made you know too much of a of a dent with that it just wasn't enough creative ability but a little bit more whether it was the variable floors and ceilings and arbitrary angles in doom or the smaller voxel blocks in uh in minecraft is then enough to open it up to to just worlds and worlds of new capabilities what is binary space partitioning so these are one one of the technologies yeah so jump around a little bit on the on the story path there yes so while the team was working on spirit destiny for wolfenstein yes i am i had we had met another development team raven software while we were in wisconsin",
        "start": "02:31:09",
        "duration": 221.679,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "and um they were doing they had rpg background and i i still kind of loved that and i offered to do a game engine for for them to let them do a 3d rendered rpg instead of the like most rpg games were kind of hand drawn they made it look kind of 3d but it was done just all with artist work rather than a real engine and after wolfenstein this was still a tile-based world but i added floors and ceilings and some lighting and the ability to have some sloped floors in different areas that was my intermediate step for a game called shadowcaster and it had slowed down enough it was not fast enough to do our type of action things so that they had the screen cropped down a little bit so you couldn't go the full screen with like we would try to do in wolfenstein i am but i learned a lot i got the floors and ceilings and lightings and it looked great they were great artists up there and it was it was an inspiration for us to look at some of that stuff but i had learned enough from that that i had the plan for i knew faster ways to do the the lighting and shadowing and i wanted to do this freeform geometry i wanted to break out of this tile-based 90 degree world limitations so we had that was when we got our next stations and we were working with these higher powered systems and i we built an editor that let us draw kind of arbitrary line segments and i was working hard to try to make something that could render this fast enough um you know i was pushing myself pretty hard i and we were we were at a point where we could see some things that looked amazingly cool but it wasn't really fast enough for the way i was doing it i for this flexibility it was no longer i couldn't just raycast into it and i had these very complex sets of lines and simple little worlds were okay but the",
        "start": "02:32:59",
        "duration": 210.80099999999993,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "cool things that we wanted to do just weren't quite fast enough and i wound up taking a break at that point and i did the the port i did two ports of our games uh wolfenstein to the uh to the super nintendo it was uh it was a crazy difficult thing to to do which was an even slower processor it's like two i couple megahertz uh processor and it had been this whole thing where we had farmed out the i am the work and it wasn't it wasn't going well and i took it back over and trying to make it go fast on there where it really did not have much processing power the pixels were stretched up hugely and it's it was pretty ugly when you looked at it but in the end it did come out fast enough to play and still be kind of fun from that but that was where i started using uh bsp trees or binary space partitioning trees it was one of those things i had to make it faster there it was a stepping stone where it was reasonably easy to understand in the grid world of wolfenstein where it was all still 90 degree angles i'm bsp trees were i eased myself into it with that and it was a big success i'm then when i came back to working on doom i had this new tool in my toolbox it was going to be a lot harder with the arbitrary angles of doom this was where i really started grappling with epsilon problems and just you know up until that point i hadn't really had to deal with the fact that i am so many numeric things this almost felt like a betrayal to me whereas people had told me that i had mathematicians up on a bit of a pedestal where i was people think i'm a math wizard and i'm not i really everything that i did was really done with a solid high school math understanding i you know algebra 2 trigonometry and i'm that was what got me all the way through",
        "start": "02:34:45",
        "duration": 216.72000000000003,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "doom and quake and all of that of just understanding basics of matrices and knowing it well enough to do something with it what's the epsilon problems you run into so i when you wind up taking a like a sloped line and you say i'm going to intersect it with another sloped line i am then you wind up with something that's not going to be on these nice grid boundaries with uh the wolfenstein tile maps all you've got is horizontal and vertical lines looking at it from above and if you cut one of them it's just obvious the other one gets cut exactly at that point but when you have angled lines you're doing a kind of a slope intercept problem and you wind up with rational numbers there where things that are not going to evenly land on an integer or even on any fixed point value that you've got so everything winds up having to snap to some fixed point value so the lines slightly change their angle you wind up if you cut something here this one's going to bend a little this way and it's not going to be completely straight and then you come down to all these questions of well this one is is is a point on an angled line you can't answer that in finite precision unless you're doing something with actual rational numbers and later on i did waste far too much time chasing things like that how do you do precise arithmetic with rational numbers and it always blows up eventually you know exponentially as you do now so these are these kind of things they're impossible with computers so they're possible again there are paths to do doing it but you can't fit them conveniently and any of the numbers you need to start using big nums and different factor trackings and different things so you uh you have to if you have any elements of ocd and you want to do something perfectly you're screwed if you're working with floating point yeah so so you had to deal with this for the first time yeah there was there were",
        "start": "02:36:34",
        "duration": 205.11899999999997,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "lots of challenges there about like okay they built this cool thing and the way the bsp trees work is it basically takes the walls and it carves other walls by those walls in this clever way that you can then take all of these fragments and then you can for sure from any given point get an ordering of everything in the world and you can say this goes in front of this goes in front of this all the way back to the last thing and that's super valuable for graphics where uh kind of a classic graphics algorithm would be painter's algorithm you paint the furthest thing first and then the next thing and then the next thing and then it comes up and it's all perfect for you uh that's slow because you don't want to have to have drawn everything like that but you can also flip it around and draw the closest thing to you and then if you're clever about it you can figure out what you need to draw that's visible beyond that and that's what bsp trees allow you to do yeah so it's combined with a bunch of other things but it gives you that ordering it's a clever way of doing things and i remember i had learned this from i one of my my graphics bible at the time a book called foley and van damme and again it was a different world back there there was a small integer number of books and this book that yeah yeah this book that was it was big fat college textbook that i had i'd read through many times i didn't understand everything in it some of it wasn't useful to me but they had the little thing about uh finite orderings of you draw a little t-shaped thing and you can say you can you can make a fixed ahead of time order from this and you can generalize this with the bsp trees and and i got a little bit more information about that it was kind of fun later while i was working on quake i got to meet uh bruce naylor who is one of the original researchers that developed those technologies uh you know",
        "start": "02:38:16",
        "duration": 204.96099999999998,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "as for academic literature and that was kind of fun but i was very much just finding a tool that can help me solve what i was doing and i was using it in this very crude way in a two-dimensional fashion rather than the general 3d the epsilon problems got much worse in quake and three-dimensionals when things angle in every way but eventually i did sort out the sort out how to do it reliably on doom there were still a few edge cases in doom that were not absolutely perfect where they they even got terminologies in the communities like when you got to something where it was messed up it was a hall of mirrors effect because you'd sweep by and it wouldn't draw something there and you would just wind up with the leftover remnants as you flipped between the the two pages but bsp trees were important for it but it's again worth noting that uh after we did doom our major competition came from ken silverman his build engine which was used for duke nukem 3d and some of the other games for 3d realms and he used a completely different technology nothing to do with i'm with bsp trees so there's not just a one true way of doing things i there were critical things about to make any of those games fast you had you had to separate your drawing into you drew vertical lines and you drew horizontal lines just kind of changing exactly what you would draw with them that was critical for the technologies uh at that time and like all the games that were kind of like that wound up doing something similar but there were still a bunch of other decisions that could be made and we made good enough decisions on everything on doom we we brought in multiplayer significantly and it was our first game that was designed to be modified by the user community where we had this whole setup of our wad files and p-wads and things that people could could build with tools",
        "start": "02:39:58",
        "duration": 208.23999999999995,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "that we released to them and they eventually rewrote to be better than what we released but they could build things and you could add it to your game without destructively modifying it which is what you had to do in all the early games you literally hacked the the data files or the executable before while doom was set up in this flexible way so that you could just say run the normal game with this added on on top and it would overlay just the things that you wanted to there would you say that doom was kind of the first true 3d game that you created so no it's still doom would usually be called a two and a half d game where it had three dimensional points on it and this is another one of these kind of pedantic things that people love to argue about about what was the first 3d game i still like i'm like every month probably i hear from somebody about well was doom really a 3d game or something i and you know i give the the point where characters had three coordinates so you had like an x y and z the cacademian could be coming in very high and come you know and come down towards you uh the walls had three coordinates on them so on some sense it's a 3d game engine but it was not a fully general 3d game engine you could not i you could not build a pyramid in doom because you couldn't make a sloped wall which was slightly different where in that previous shadow caster game i couldn't have vertexes and have a sloped floor there but the changes that i made for doom to get higher speed and a different set of flexibility traded away that ability but you literally couldn't make that you could not i you could make different heights of uh passages but you could not make a bridge over another area you could not go over and above it so it still had some 2d limitations to it that's more about the building versus the actual experience because the",
        "start": "02:41:43",
        "duration": 208.3999999999999,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "experience is it felt like things would come at you but again you couldn't look up either i am right you know you could only pitch it was four degrees of freedom rather than six degrees of freedom you did not have the ability to tilt your head this way or pitch up and down so that takes us to quake what was the leap there what was some fascinating technical challenges and there were a lot or not challenges but innovations that you've come up with so quake was kind of the first thing where i did have to kind of come face to face with my limitations where it was the first thing where i really did kind of give it my all and still come up a little you know come up a little bit short in terms of what and when i wanted to to get it done and the company ran had some serious stresses through the the whole project and we uh we bit off a lot so the things that we set out to do was it was going to be really a true 3d engine where it could do six degree of freedom you could have all the all the viewpoints you could model anything it had a really remarkable new lighting model with the the surface caching and things that was one of those where it was starting to to do some things that they weren't doing even on the very high-end systems and it was going to be completely programmable uh in the modding standpoint where the thing that you couldn't do in doom you could replace almost all of the media but you couldn't really change the game uh there were still some people that were doing the hex setting of the executable the d-hacked things where you could change a few things about rules and people made some early capture of the flag type things by hacking the executable but it wasn't really set out to do that quake",
        "start": "02:43:27",
        "duration": 202.87999999999997,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "was going to have its own programming language that the game was going to be implemented in it and that would be able to be overwritten just like any of the media code was going to be data for that and you would be able to have expansion packs that changed fundamental things and mods and so on and the the multiplayer was going to be playable over the internet it was going to support a client server rather than peer-to-peer so we had the possibility of supporting larger numbers of players in disparate locations with this full flexibility of the the programming overrides with full six degree of freedom modeling and viewing and with this fancy new light mapped um kind of surface caching side it was a lot and this was one of those things that if i could go back and tell um you know tell younger me to do something differently it would have been to split those innovations up into two phases in two separate games will be phase one and phase two so it probably would have been taking the doom rendering engine and bringing in uh the tcp uh client server focusing on the multiplayer and the uh the quake c or would have been doom c programming language there so i would have split that into programming language and networking with the same doom engine rather than forcing everybody to go towards the the pen you know the quake engine which really meant getting a pentium you know while it ran on a 486 it was not a great experience there we could have made more people happier and gotten two games done in 50 percent more time i so speaking of people happier our mutual friend joe rogan it seems like his the the most important uh moment of his life is is uh centered around quake so it was a definitive um part of his life so would he agree with your uh thinking that they should split uh so he is a person who loves quake and",
        "start": "02:45:08",
        "duration": 225.2,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "played quake a lot would he agree that you should have done the doom engine with and focus on the multiplayer for phase one uh or in your looking back it is is the the 3d world that quake created was also fundamental to the the enrollment you know i would say that what would have happened is you would have had a a doom looking but quake feeling uh game eight months earlier and then maybe six months after quake actually shipped then there would have been the full running on a pentium um six degree of freedom graphics engine type things there so it's not that it wouldn't have cut it wouldn't have been there it would have been something amazingly cool earlier and then something even cooler somewhat later where i would much rather in have gone and done two one-year development efforts i cycle them through i be a little more pragmatic about that rather than killing us ourselves on the whole quake development but i say it's obviously things worked out well in the end but looking back and saying how would i optimize and do things differently that did seem to be a clear case where i going ahead and we had enormous momentum on doom you know we did doom 2 as the kind of commercial boxed version after our shareware success with the original but we could have just made another doom game adding those new features in it would have been huge we would have learned all the same lessons but faster and it would have given six degree of freedom and pentium class systems a little bit more time to get mainstream because we did cut out a lot of people with the hardware requirements for quake was there any dark moments for you personally psychologically in having",
        "start": "02:47:01",
        "duration": 214.47899999999998,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "um in um having such harsh deadlines and having this also many difficult technical challenges so i've never really had really dark black places i mean i i can't necessarily put myself in anyone else's shoes but i understand a lot of people have you have significant challenges with kind of their their mental health and well-being and i've been i've been super stressed i've been you know unhappy as a teenager in various ways but i've never i've never really gone to a very dark place i just seem to be largely immune to what really wrecks people i mean i've had plenty of time when i'm very unhappy and miserable about something but it's never hit me like you know i believe it winds up hitting some other people i've borne up well under whatever stresses have i you know have kind of fallen on me and i've always coped best on that when all i need to do is is usually just kind of bear down on my work i i pull myself out of whatever hole i might be slipping into by actually making progress i i mean maybe if i was in a position where i was never able to make that progress i could have slid down further but i've always been in a place where okay a little bit more work maybe i'm in a tough spot here but i i always know if i just keep pushing eventually i break through and i make progress i feel good about what i'm doing i am and that's been enough for me so far in my life have you seen in the distance uh like um you know ideas of depression or contemplating suicide have you seen those things far so it was interesting when when i was a teenager i was you know i i was probably on some level a troubled youth i was unhappy most of my teenaged uh you know years i you know i",
        "start": "02:48:47",
        "duration": 224.40099999999998,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "really i wanted to be on my own doing programming all the time i you know as soon as i was 18 19 even though i was poor i was doing exactly what i wanted and i was very happy but high school was not a great time for me and i i had a conversation with like the school counselor and they're kind of running their script it's like okay as kind of a weird kid here let's carefully probe around it's like you know do you ever think about ending it all i'm like no of course not never not at all i this is temporary things are going to be better i'm and and that's always been kind of the case for me and obviously it's not that way for everyone and other people do react differently and what was your um what was your escape from the troubled youth like uh uh you know music video games books how did you escape from a world that's full of cruelty and suffering and that's absurd yeah i mean i i was not you know i was not victim of cruelty and suffering it's like i was an unhappy somewhat petulant youth and you know in my point where i you know i'm not putting myself up with anybody else's suffering but i was unhappy objectively and i the things that i i did that very much characterized my childhood were i had um books comic books dungeons and dragons arcade games video games like some of my my fondest childhood memories are the convenience stores the 7-elevens and quick trips because they had a spinner rack of comic books and they had a little side room with two or three video games arcade games in it and that was uh that was very much my happy place you know if i could i get my comic books and uh if i could go to a library and you know go through those the little zero zero zero section where computer books were supposed to be and there are a few sad little books there but still",
        "start": "02:50:40",
        "duration": 216.959,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "just being able to sit down and go through that and i read you know i read a ridiculous number of books both fiction and non-fiction as a teenager and i you know as i my rebel my rebelling in high school was just sitting there with my nose in a book ignoring the class uh and through lots of it and teachers had a range of reactions to that some more uh more accepting of it than others i'm with you on that so let us return to quake for a bit with the technical challenges what what um everything together from the from the networking to the the graphics what what are some things you remember that were that were innovations yet to come up with in order to make it all happen yeah so there were a bunch of things on quake where on the one hand the idea that i built my own programming language to implement the game in looking back and i try to tell people it's like every every high level programmer sometime in their career goes through and they invent their own language it just seems to be a thing that's pretty broadly done people they're like i'm going to go write a computer programming language and i you know i don't regret having done it but after that i i switched from quake c my quirky little i am pseudo object orienter entity oriented language there quake 2 went back to using dlls with c and then quake 3 i implemented my own c interpreter or compiler which was a much smarter thing to do that i should have done originally for quake but building my own language was an experience i learned a lot from that i am and then there was a generation of game programmers that learned programming with quake c which i feel kind of bad about because you know i mean we give javascript a lot of crap but i'm you know quake c was nothing to write home about there uh but it was it allowed people to do",
        "start": "02:52:29",
        "duration": 211.04099999999997,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "magical things you get into programming not because you love the the bnf syntax of a language it's because the language lets you do something that you cared about and here's very much you could do something in a whole beautiful three-dimensional world and the idea and the fact that the code for the game was out there you could say i like the shotgun but i want it to be more badass you go in there and say okay now it does 200 points damage and then you go around with a big grin on your face blowing up monsters all over the game so yeah it's i you know it is not uh what i would do today going back with that language but that was a big part of it learning about the networking stuff i because it's interesting where i learned these things by reading books so i would get a book on networking and find something i read all about and learn okay packets they can be you know out of order or lost or duplicated these are all the things that can theoretically happen to packets so i wind up spending all this time thinking about how do we deal about all that and it turns out of course in the real world those are things that yes theoretically can happen with multiple routes but they really aren't things that you're 99.999 of your packets have to deal with i am so there was learning experiences about uh lots of that and like why when tcp is appropriate versus udp and and how if you do things in udp you wind up reinventing tcp badly in almost all cases so you know there's there's good arguments for using both for different game technology different parts of the game process transitioning from level to level and all but the the graphics were the showcase of what what quake was all about it was this graphics technology that nobody had seen there",
        "start": "02:54:14",
        "duration": 201.278,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "and it was a while before you know there were competitive things out there and it went a long time internally really not working where we were even building levels where uh the game just was not at all shippable with large fractions of the world like disappearing not being there i've or being really slow in various parts of it and it was this act of faith it's like i think i'm going to be able to fix this i think i'm going to be able to make this work i'm and lots of stuff changed where the level designers would build something and have to throw it away as something fundamental and the kind of graphics or level technology change and the uh so there were two big things that contributed to making it possible at that time frame i am two new things there was certainly hardcore optimized low level assembly language this was where i had hired michael a brash away from microsoft and he had been one of my early inspirations where that back in the soft disk days the library of magazines that they had some of my most treasured ones were michael a brash's uh articles in dr dobbs journal and it was it was amazing after all of our success in doom we were able to kind of hit him up and say hey we'd like you to come work at id software and he was in the senior technical role at microsoft and i am you know and he was on track for and this was right when microsoft was starting to take off and i did eventually you know convince him that what we were doing was going to be really amazing with quake it was going to it was going to be something nobody had seen before it had these aspects of what we were talking about and we had metaverse talk back then we you know we had read snow crash and we were we knew about this and uh michael was i was big",
        "start": "02:55:55",
        "duration": 206.48099999999997,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "into the science fiction and we would talk about all that and kind of spin this tale and it was some of the same conversations that we have today about the metaverse about how you could have different areas linked together by portals and you could have user generated content and changing out all these things so you really were creating the metaverse with quake and we we talked about things like philosophy you used to be advertised as a virtual reality experience you know that was the first wave of virtual reality was in the late 80s and early 90s you had like the lawn mower man you know movie and you had time in newsweek talking about the early vpl headsets and of course that cratered so hard that people didn't want to look at virtual reality for decades afterwards where uh it was just it was spoken mirrors it was not real in the sense that you could actually do something real and valuable with it but uh but still we had that kind of common set of talking points and we were talking about what these games could uh could become and how you'd like to see people building all of these creative things because we were seeing an explosion of work with doom at that time where people were doing amazingly cool things like we saw cooler levels than we had built coming out of the user community and then people finding ways to you know change the the characters in different ways and it was great and we knew what we were doing in quake was removing those last things there was some quirky things with a couple of the data types that didn't work right for overriding and then and then the core thing about the programming model and i was definitely going to hit all of those in quake um but the the graphics side of it was i was still i knew what i wanted to do and it was one of these",
        "start": "02:57:38",
        "duration": 201.041,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "hubris things where it's like well so far i've been able to kind of kick everything that i set out to go do but quake was definitely a little bit more than could be comfortably chewed at that point and i but michael was one of the one of the strongest programmers and graphics programmers that i knew he was one of the people that i trusted to to write assembly code you know better than i could and there's there's a few people that i can point to about things like this where i'm a world-class optimizer i mean i make things go fast but i recognize there's a number of people that can write tighter assembly code tighter sim decode or tighter cuda code then you know then i can write i'm you know my best strengths are a little bit more at the system level i mean i'm good at all of that but the most leverage comes from making the decisions that are a little bit higher up where you figure out how to change your large scale problems so that these lower level problems are easier to do or it makes it possible to do them in a in a uniquely fast way so most of my you know my big wins in a lot of ways from all the way from the early games through you know through vr and the aerospace work that i'm doing and or did and hopefully the ai work that i'm working on now is finding an angle on something that means you trade off something that you maybe think you need but it turns out you don't need and by making a sacrifice in one place you can get big advantages in another place is it clear at which level of the system those big advantages can be gained it's not always clear and that's why the thing that that i try to make one of my core values and i i proselytize to a lot of people is trying to know the entire stack you know trying to see through everything that happens and it's almost impossible on like the web browser level of things where there's so",
        "start": "02:59:19",
        "duration": 226.07899999999995,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "many levels to it but you should at least understand what they all are even if you can't understand all the performance characteristics at each level but it goes all the way down to literally the hardware so what does the what is this chip capable of and what is this software that you're writing capable of and then with this architecture you put on top of that then the ecosystem around it all the people that are that are working on it so there are there are all these decisions and they're never made in a globally optimal way but sometimes you can drive a thread of global optimality through it you can't look at everything it's too complicated but sometimes you can step back up and make a different decision and we kind of went through this on the graphics side on quake where i in some ways it was kind of bad where michael would spend his time writing like i'd i'd rough out the basic routines like okay here's our span rasterizer and he would spend a month writing this you know beautiful cycle optimized piece of assembly language that does you know does what i asked it to do and he did it faster than like my original code would do or probably what i would be able to do even if i had spent that month on it i but then we'd have some cases when i'd be like okay well i figured out at this higher level instead of drawing these in a painter's order here i do a span buffer and it cuts out 30 or 40 of all of these pixels but it means you need to rewrite kind of this interface of all of that and i could tell that war on him a little bit but in the end it was it was the right thing to do where we wound up changing that rasterization approach and we wound up with a super optimized assembly language core loop and then a good system around it which minimized how much that had to be called and so in order to be able to do this kind of system level thinking whether we're talking about",
        "start": "03:01:12",
        "duration": 216.63999999999996,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "game development aerospace nuclear energy ai vr you have to be able to understand the hardware the low-level software the high-level software the design decisions the whole thing the the full stack of it yeah and that's where a lot of these things become possible when you're really when you're bringing the future forward i mean there's a pace that everything just kind of glides towards where we have a lot of progress that's happening at such a dif so many different ways you kind of slide towards progress just left your own programs just get faster for a while it wasn't clear if they were going to get fatter more than they get quicker than they get faster and it cancels out but it is clear now in retrospect no programs just get faster and have gotten faster for a long time but if you want to do something like back at that original talking about scrolling games say what this needs to be five times faster well we can wait six years and just it'll naturally get that much faster at that time or you come up with some really clever way of doing it so there are those opportunities like that in a whole bunch of different areas now most programmers don't need to to be thinking about that there's not that many you know there's a lot of opportunities for this but it's not everyone's work a day type stuff so everyone doesn't have to know how all these things work they don't have to know how their compiler works how you know the processor chip manages cache eviction and all these low-level things but sometimes there are powerful opportunities that you can look at and say we can bring the future five years faster you know we can do something that",
        "start": "03:03:00",
        "duration": 195.281,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "wouldn't it be great if we could do this well we can do it today if we make a certain set of decisions and it is in some ways smoke and mirrors where you say it's like doom was a lot of smoke and mirrors where people thought it was more capable than it actually was but we picked the right smoke and mirrors to deploy in the game where by doing this people will think that it's more general if we're going to amaze them with what they've got here and they won't notice that it doesn't do these other things so smart decision making at that point that's where that that kind of global holistic top-down view uh can work and i'm i'm really a strong believer that technology should be sitting at that table having those discussions because you do have cases where you say well you want to be the jonathan ivy or whatever where it's a a pure design solution and that's i in some cases now where you truly have almost infinite resources like if you're trying to do a a scrolling game on the pc now you don't even have to talk to a technology person you can just have i you know any intern can make that go run as fast as it needs to there and it can be completely design based but if you're trying to do something that's hard either that can't be done for resources like vr on a mobile chipset or that we don't even know how to do yet like artificial general intelligence it's probably going to be a matter of coming at it from an angle like i mean for agi we have some of like what are some of the hutter principles about how you can you know acer some of the there are theoretical ways that you can say this is the optimal learning algorithm that can solve",
        "start": "03:04:38",
        "duration": 194.79899999999995,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "everything but it's completely impractical you know you just can't do that so clearly you have to make some concessions for general intelligence and nobody knows what the right ones are yet so people are taking different angles of attack i hope i've got something clever to come up with in that space it's been surprising to me and i think perhaps it is a principle of progress that smoke and mirrors somehow is the way you build the future you kind of you kind of fake it till you make it and you almost always make it and i think that's going to be the way we achieve agi that's going to be the way we build uh consciousness into our machines is there's you know philosophers debate about the touring test is essentially about faking it till you make it you start by faking it and i think that always leads to making it because if you look at history arguments when as soon as people start talking about qualia and consciousness and chinese rooms and things it's like i just check out i just don't think there's any value in those conversations it's just like go ahead tell me it's not going to work i'm going to do my best to try to make it work anyways i don't know if you work with legged robots and a bunch of these um they they make they sure as heck make me feel like they're cautious in a certain way that's not here today but is um you could see the kernel yeah it's like uh the the the flame the beginnings of a flame we don't have line of sight but there's glimmerings of light in the distance for all of these things yeah i'm hearing murmuring in a distant room um well let me ask you a human question here you you've uh in the game design",
        "start": "03:06:15",
        "duration": 207.20000000000005,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "space you've done a lot of incredible work throughout but in terms of game design you have changed the world and there's a few people around you that did the same so famously there's some animosity there's much love but there's some animosity between you and john romero what is at the core of that animosity and human tension and so there really hasn't been i for a long time and even at the beginning it's like yes i am i did push romero out of the company and and this is one of the things that i look back if i could go back telling my my younger self um some advice about things the original founding kind of corporate structure of id software really led to a bunch of problems we started off with us as equal partners and we had a buy sell agreement because we didn't want outsiders to be telling us what to do inside the company and that did lead to a bunch of the problems where i was sitting here going it's like all right i'm i'm working harder than anyone i'm doing these technologies you know nobody's done before but we're all equal partners and then i see you know somebody that's not working as hard and i and it's i mean i can't say i was the most mature about that i was you know 20 something years old and i am and it did it did bother me when i'm like everybody okay we need all pull together and we've done it before everybody we know we can do this if we get together and we grind it all out but not everybody wanted to do that for for all time you know and i was the youngest one of the the crowd there i i had different sets of kind of backgrounds and motivations and left at that point where it was i'm all right either everybody",
        "start": "03:07:59",
        "duration": 213.12100000000004,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "has to be contributing like up to this level or they need to get pushed out was not i am that was not a great situation and i look back on it and no that we pushed people out of the company that could have contributed uh if there was a different framework for them and the modern kind of silicon valley like let your stock vest over a time period and maybe it's non-voting stock and all those different things we knew nothing about any of that i mean we we didn't know what we were doing in terms of corporate structure or anything so if you think the framework was different some of the human tension could have been a little bit it almost certainly would have i i mean i look back at that and and it's like even trying to summon up in my mind it's like i know i was really really angry about i am you know like romero not working as hard as i wanted him to work or not carrying his load on the design for quake and coming up with things there but you know he was definitely doing things he made some of the best levels there he was working with our i some of our external teams like raven on the licensing side of things but i am yeah but there were differences of opinion uh about it but he landed you know right on his feet he went he got 20 million dollars from idos to go do ion storm and he got to do things his way and spun up three teams simultaneously because that was always one of the one of the challenging things in it id where we were doing these single string one project after another and i think some of them you know wanted to grow the company more and i didn't because i knew people that were saying that oh companies turned to when you got 50 employees i it's just a different world there and i loved our little dozen people working on the projects but you can look at it and say well business realities matter it's like you're super",
        "start": "03:09:45",
        "duration": 213.51899999999995,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "successful here and we could we could take a swing and a miss on something but you do it a couple times and you're out of luck uh there's there's a reason companies try to have multiple teams running at one time i am and so that was again something i didn't really appreciate back then so if you look past all that you did create some amazing things together what did you love about john romero what did you respect and appreciate about him what did you admire about him what did you learn from him when i met him he was the coolest programmer i had ever met i you know he had done all of this stuff he had he had made all of these games he had worked at i you know one of the companies that i thought was the coolest at origin systems and he knew all this stuff he made things happen fast and he could it was also kind of a polymath about this where he could do he made his own he drew his own art he made his own levels as well as um you know he worked on sound design systems on top of actually being a really good programmer and we had you know we went through a little it was kind of fun where one of the early things that we did where there was kind of the young buck bit going in where i was uh the new guy and he was the kind of the he was the top man programmer at the soft disc area and eventually we had sort of a challenge over the weekend that we were gonna like race to to implement this game to port one of our pc games back down to the apple too and that was where we finally kind of became clear it's like okay carmack stands a little bit apart on the programming side of things and uh but romero then very gracefully moved into well he'll work on the tools he'll work on the systems uh do some of the game design stuff as well as contributing on starting to lead the design aspects of a lot of things so he was you know enormously valuable",
        "start": "03:11:32",
        "duration": 206.881,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "in the early stuff and so much of doom uh and even quake have his stamp on it in a lot of ways but um you know he wasn't at the same level of focus that that i brought to the the work that we were doing there and he really did i we hit such a degree of success it was all in the press about that the the rockstar game programmers yeah yeah it's the beatles problem yeah i mean you know he ate it up and he did personified there was the whole game developers with you know with ferraris that uh that we had there and i thought that you know that led to some some challenges there but so much of the uh you know the stuff that was great in the games did come from him and i would certainly not take that away from him and even after i after we parted ways and he took his swing with uh with idos in some ways he was like he was ahead of the curve with mobile gaming as well where uh one of his companies after idos was working on uh feature phone game development and i wound up doing some of that uh just before the iphone crossing over into the iphone phase there and that was something that clearly did turn out to be a huge thing although he was he was too early for what he was working on at that time you know we've had uh pretty you know cordial relationships where i was happy to talk with him anytime i'd run into him at at a conference i have actually had some other people just say it's like oh you shouldn't you know you shouldn't go over there and give him the time of day or felt that masters of doom was i you know like portray played things up in a way that i shouldn't be too happy with but i'm i'm okay with all of that and you've got love in your heart yeah i mean i just talked with him by like last",
        "start": "03:13:15",
        "duration": 206.39900000000003,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "year or i guess it was even this year about mentioning that i'm going off doing this ai stuff i'm i'm going big into artificial intelligence and he had a bunch of ideas for how ai is going to play into gaming and you know asked if i was interested in collaborating and it's not in line with what with what i'm doing but i do you know i wish almost everyone the best i mean i i know i may not have parted on the best of terms with i you know with some people but i was thrilled to see tom hall i writing vr games now he wrote working on a game called demio which is really an awesome vr game it's like dungeons and dragons we all used to play dungeons and dragons together that was one of the things that was what we did on sundays in the early days i would dungeon master and they'd all play and i you know so it really made me smile seeing tom involved with an rpg game in virtual reality you were the cto of oculus vr since 2013 and maybe lessen your involvement a bit in uh 2019 oculus was acquired by facebook now meta in 2014. you've spoken brilliantly about both the low-level details the experimental design and the big picture vision of virtual reality let me ask you about the uh the metaverse the big question here both philosophically and technically how hard is it to build the metaverse what is the metaverse in your view you started with discussing and thinking about quake as a kind of a metaverse as you think about it today what is the metaverse the thing that could create this compelling user value this experience that will change the world and how hard is it to build it so the term comes from neil stephenson's book snow crash which many of us had",
        "start": "03:14:59",
        "duration": 208.6400000000001,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "read back in the 90s it was one of those kind of formative books and there was this sense that the the possibilities and kind of the the freedom and unlimited capabilities to build a virtual world that that does whatever you want whatever you ask of it has been a powerful draw for generations of developers you know game developers specifically and people that are thinking about more more general purpose applications so we were talking about that back in the doom and quake days about how do you wind up with an interconnected set of worlds that you kind of visit from one to another and as web pages were becoming a thing you start thinking about how what is the interactive kind of 3d based equivalent of this and there were a lot of really bad takes you had like verbal then virtual reality markup languages and there's aspects like that that that came from people saying well what would what kind of capabilities should we develop to to enable this and that kind of capability first work has usually not panned out very well on the other hand we have successful games that started with things like doom and quake and communities that formed around those and uh whether it was server lists in the early days or you know literal portaling between different games and then modern things that are on completely different order of magnitude like minecraft and fortnite that have 100 million plus users um you know i still think that that's the right way to go to build the metaverse is you build something that's amazing that people love and people wind up spending all their time in because it's awesome and you expand the capabilities of that so yeah even if it's a very basic experience",
        "start": "03:16:43",
        "duration": 208.16,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "minecraft is minecraft is an amazing case study in so many things basically what's going on with that is really enlightening and there are other cases where like right now roblox is basically a game construction kit aimed at kids and that was a capability first play and it's achieving scale that's on the same order of those things so it's not impossible but my preferred bet would be you make something amazing that people love and you make it better and better and that's where i could say we could have gone back and followed a path kind of like that in the early days if you just kind of take the same game whether it's when activision demonstrated that you could make call of duty every year and not only is it not bad people kind of love it and it's a it's very profitable the idea that you could have taken something like that it take a great game release a new version every year that lets the capabilities grow and expand to start saying it's like okay it's a game about running around and shooting things but now you can have i bring your media into it you can i add persistence of social sense sinus signs of life or whatever you want to add to it i i still think that's you know quite a good position to take and i think that while meta is doing a bottoms-up capability approach with horizon worlds where it's a fairly general purpose creators can build whatever they want in their sort of thing i am you know it's it's hard to compare and compete with something like fortnite which also has enormous amounts of creativity even though it was not designed originally as a general purpose sort of thing so there's we have examples on both sides me personally i would have bet on uh trying to do entertainment valuable destination first and expanding from there so",
        "start": "03:18:27",
        "duration": 223.281,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "can you imagine the thing that will be kind of if we look back a couple centuries from now and you think about the experiences that marked the singularity the transition in where most of our world moved into virtual reality what do you think those experiences will look like so i do think it's gonna be kind of like the way the web slowly took over where you're you're the the frog in the pot of water that's slowly heating up where having lived through all of that i remember when it was shocking to start seeing uh seeing the first website address on a billboard when you're like hey my computer world is in infecting the real world you know this is spreading out uh in some way but they're still when you look back and say well what what made the web take off and it wasn't a big bang sort of moment there it was a bunch of little things that turned out not even be the things that are relevant now that brought them into it so well i wonder if from i mean like you said you're not a historian so maybe there's a historian out there that could really identify that moment data-driven way it could be like myspace or something like that maybe the first major social network that really reached into non-geek world or something like that i think that's kind of the fallacy of historians though looking for some of those kind of primary dominant causes where so many of these things are like we see an exponential curve but it's not because like one thing is going exponential it's because we have hundreds of little sigmoid curves overlapped on top of each other and they just happen to keep adding up so that you've got something kind of going exponential at any given point but not",
        "start": "03:20:18",
        "duration": 215.36000000000004,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "no single one of them was the critical thing there were you know dozens and dozens of things i mean seeing the transitions of stuff like as obviously myspace giving way to other things but even like blogging giving way to uh to social media and getting resurrected in other guyses and the meme things that happened there dancing baby gif or whatever the all your base now belong to us whatever those early memes that led to the modern memes and the humor on the different the different evolution of humor on the internet i'm sure the historians will also write books about uh from the different websites that support to create the infrastructure for that humor like reddit and all that kind of stuff so people will go back and they will name firsts and critical moments but it's probably going to be a poor approximation of what actually happens and we've already seen like in the vr space where it didn't play out the way we thought it would in terms of what was going to be like when the modern era of vr basically started with my e3 demo of doom 3 on the rift prototype so we're like first person shooters in vr match made in heaven right and that didn't work out that way at all they have you know they have the most comfort problems with it and then the most popular virtual reality app is beat saber which nobody predicted back then what's that make you uh like from first principles if you were to like reverse engineer that why are these like silly fun games the most it actually makes very clear sense when you when you analyze it from from hindsight and look at the engineering reasons where it's not just that it was a magical quirky idea it was something that played almost perfectly to what turned out to be the real strengths of",
        "start": "03:22:06",
        "duration": 206.24,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "vr where the one thing that i really underestimated importance in vr was the importance of the controllers you know i was still thinking we could do a lot more with uh with the gamepad and just the amazingness of taking any existing game being able to move your head around and look around that that was you know that was really amazing but the controllers uh were super important but the problem is so many things that you do with the controllers just suck it feels like it breaks the illusion like trying to pick up glasses with the controllers where you're like oh use the grip button when you're kind of close and it'll snap into your hand all of those things are unnatural actions that you do them and it's still part of the vr experience but beat saber winds up by playing only to the strengths it completely hides all the weaknesses of it because you are holding something in your hand you keep a solid grip on it the whole time it slices through things without ever bumping into things you never get into the point where you know i'm knocking on this table but in vr my hand just goes right through it so you've got something that slices through so it's never your brain telling you oh i should have hit something you've got a lightsaber here it's just you expect it to slice through everything uh audio and music turned out to be a really powerful aspect of virtual reality where you're blocking the world off and constructing the world around you and i and being something that can run efficiently on even this relatively low-powered hardware and can have a valuable loop in a small amount of time where a lot of modern games you're supposed to sit down and play it for an hour just to get anywhere sometimes new game takes an hour to get through the tutorial level and that's not good for vr for a couple reasons you do still have the comfort issues if you're moving",
        "start": "03:23:49",
        "duration": 201.11899999999997,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "around at all but you've also got just you know discomfort from the headset battery life span on the mobile versions so having things that do break down into three and four minute windows of play that turns out to be very valuable from a gameplay standpoint so it winds up being kind of a perfect storm of all these things that are really good it doesn't have any comfort problems you're not navigating around you're standing still all the stuff flies at you it has placed audio strengths i it adds the whole fitness in vr nobody was thinking about that back in the at the beginning and it turns out that that is an excellent daily fitness thing to be doing if you go play uh an hour of beat saver or supernatural or something that is legit solid exercise uh and it's more fun than doing it just about any other way there so that's kind of the arcade stage of things if i were to say with my experience with vr the thing that i think is powerful is the maybe it's not here yet but the degree to which it is immersive in the way that quake is immersive it takes you to another world for me because i'm a fan of role playing games uh the elder scrolls series uh like skyrim or even daggerfall it just takes you to another world and when you're not in that world you miss not being there and then you just you kind of want to stay there forever because life is shitty and you just want to go to these places is that i there was a there was a time when i we were kind of asked to come up with like what's your view about vr and i am you know my pitch was that it should be better inside the headset than outside it's the world as you want it yeah and everybody thought that was dystopian and like that's like",
        "start": "03:25:30",
        "duration": 224.07999999999998,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "oh you're just gonna forget about the world outside and i don't get that mindset where the idea that if you can make the world better inside the headset than outside you've just improved the person's life that's has a headset that can wear it and there are plenty of things that we just can't do for everyone in the real world everybody can't have richard branson's private island but everyone can have a private vr island and it can have the things that they want on it and there's a lot of these kind of rivalrous goods in the real world that vr can just be better at we can do a lot of things like that that can be very very rich so yeah i want the i think it's going to be a positive thing this world where people want to go back into their headset where it can be better than somebody that's living in a tiny apartment can have a palatial estate in virtual reality they can have all their friends from all over the world come over and visit them without everybody getting on a plane and i and meeting in some place and dealing with all the other logistics hassles there is real value in the you know the presence that you can get for remote meetings it's it's all the little things that we need to sort out but those are things that we have line of sight on people you know that have been in like a good vr meeting using workrooms where you can say oh that was better than a zoom meeting but of course it's more of a hassle to get into it not everyone has a headset interoperability is worse you can't have you cap out at a certain number there's all these things that need to be fixed but that's one of those things you can look at and say we know there's value there we just need to really grind hard to file off all the rough edges and make that possible so you do think we have line of sight because there's a there's a reason like",
        "start": "03:27:22",
        "duration": 208.40100000000004,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "i i do this podcast in person for example doing it remotely it's not the same and if you if somebody were to ask me why it's not the same i wouldn't be able to write down exactly why um but you're saying that it's possible whatever the magic is for in-person interaction that immersiveness of the experience we are almost there yes so the idea of like i'm doing a vr interview with someone i'm not saying it's here right now but you can see glimmers of what it should be and we largely know what would need to be fixed and improved to like you say there's a difference between a remote interview doing a podcast over zoom or something and face to face there's that sense of presence that immediacy the super low latency responsiveness being able to see all the subtle things there just occupying the same field of view and all of those are things that we absolutely can do in vr and that simple case of a small meeting with a couple people that's the much easier case than everybody thinks the ready player won multiverse with a thousand people going across uh you know a huge bridge to amazing places that's harder in a lot of other technical ways not to say we can't also do that but that's further away and has more challenges but this small thing about being able to have a meeting with one or a few people and have it feel real feel like you're there uh like you have the same interactions and talking with them you get subtle cues as we start getting eye and face tracking and some of the other things on high-end headsets a lot of that is going to come over and it doesn't have to be as good this is an important thing that people miss where there was a lot of people that especially rich people that would look at vr and say it's like oh this just",
        "start": "03:29:06",
        "duration": 223.43900000000008,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "isn't that good and i'd say it's like well you've already been courtside backstage and you know on pit row and you've done all of these experiences because you get to do them in real life but most people don't get to and even if the experience is only half as good if it's something that they never would have gotten to do before it's still a very good thing and as we can just we can push that number up over time it has a minimum viable value level when it does something that is valuable enough to people as long as it's better inside the headset on any metric than it is outside and people choose to go there we're on the right path and we have a value gradient that i'm just always hammering on we can just follow this value gradient just keep making things better rather than going for that one close your eyes swing for the fences kind of silver bullet approach well i wonder if there's a value gradient for in-person meetings because if you get that right i mean that would change the world yeah it doesn't need to i mean you don't need uh ready player one i but i wonder if there's that value gradient you can follow along because if there is and you follow it then uh there will be a certain like phase shift that's a certain point where people will shift from um from zoom to this uh i wonder what what are the bottlenecks is it software is it hardware is it like is it is it all about latency so i have big arguments internally about strategic things like that where i like the next headset that's coming out and that we've made various announcements about is going to be a higher end headset more expensive more features lots of people want to make",
        "start": "03:30:58",
        "duration": 207.36000000000007,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "those those trade-offs i you know we'll see what the market has to say about the exact trade-offs we've made here but if you want to replace zoom you need to have something that everybody has i'm and so you like cheaper i like cheaper because also lighter and cheaper wind up being uh a virtuous cycle there where expensive and more features tends to also lead towards heavier and it just kind of goes it's like let's add more features the features are not uh you know they have physical presence and weight and draw from batteries and all of those things so i've always favored a lower end uh cheaper faster approach that's why i was always behind the mobile side of vr rather than the higher end pc headsets and i think that's you know that's proven out well but there's i you always ideally we have a whole range of things but if you've only got one or two things it's important that those two things cover the uh you know the scope that you think is most important when we're in a world when it's like cell phones and there's 50 of them on the market covering every conceivable ecological niche you want that's going to be great but we're not going to be there for a while where are the bottlenecks is it the hardware the software yeah so right now i you can play you can get uh workrooms on quest and you can set up these things and it's a pretty good experience it's surprisingly good i haven't tried it it's surprisingly good the voice latency is better on that than a lot better than a zoom meeting so you've got a more a better sense of immediacy there the expressions that you get from the the current hardware with just kind of your controllers and your head is pretty realistic feeling you've got a pretty good sense of being there with someone with are these like uh",
        "start": "03:32:42",
        "duration": 206.24,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "avatars of people like do you do do you get to see their body yeah and they're sitting around a table yeah and it feel it feels it's better than zooming better than you yeah better than you'd expect for that it is definitely yeah i'd say it's it's quite a bit better than zoom when everything's working right but there's still all the rough edges of the reason zoom became so successful is because they just nailed the usability of everything it's high quality with a absolutely first-rate experience and we are not there yet with any of the vr stuff i'm trying to to push hard to get i i keep talking about it's like it needs to just be one click to make everything happen and we're getting there in our our home environment not the whole work rooms application but the main home where you can now kind of go over and click an invite and it still winds up taking five times longer than it should but we're getting close to that where you click there they click on their button and then they're sitting there in this good presence with you but latencies need to get a lot better user interface needs to get a lot better um ubiquity of the headsets needs to get better we need to have 100 million of them out there just so that everybody knows somebody that uses this all the time well i think it's a virtuous cycle because i do think the interface is the thing that makes or breaks this kind of revolution it's so interesting how like uh you said one click but it's also like how you achieve that one click i don't know what is um can i ask a dark question maybe let's keep it outside of meta but this is about meta but also google and big company are they able to do this kind of thing it seems like let me put on my cranky",
        "start": "03:34:26",
        "duration": 208.72,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "old manhattan is they seem to not do a good job of creating these user-friendly interfaces as they get bigger and bigger as a company like google has created some of the greatest interfaces ever uh early on and it's i mean creating gmail just so many brilliant interfaces and she seems to be getting crappier and crappier at that same with meta same with uh uh microsoft it's just it seems to get worse and worse at that as this i don't know what is it because you become more conservative careful risk-averse is that why can you speak to that then really eye-opening to me working inside a tech titan where i am you know i i had my small companies and then we're acquired by a you know a mid-sized game publisher and then uh oculus getting acquired by meta and meta has grown by a factor of many just in the the eight years since the acquisition so i did not have experience with this and it's it was interesting because i remember like previously my benchmark for uh kind of use of resources was some of the government programs i interacted with on the aerospace side and i remember thinking there was okay there's an air force program and they spent 50 million dollars and they didn't they didn't launch anything they didn't even build anything it was just kind of like they i you know they made a bunch of papers and had some parts in uh in a warehouse and nothing came of it it's like 50 million dollars i am and i have i've had to radically recalibrate my sense of like how much money can be spent with uh without a product at the end of resources where on the ver the plus side vr has turned",
        "start": "03:36:10",
        "duration": 213.35900000000004,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "out we've built pretty much exactly what you know we just passed the 10-year mark then from my like my first demo of the rift and if i could have said what i wanted to have it would have been a standalone inside out tracked 4k resolution headset that i that could still plug into a pc for high-end rendering and that's exactly what we've got on quest 2. right now first of all let's pause on that with me being cranky and everything it's what meta achieved uh with oculus and so on is incredible i mean this is this when i thought about the future of vr that's what i imagined in terms of hardware i would say and maybe in terms of the experience as well but it's still not there somehow on the one hand we did kind of achieve it and win and we've got we've sold you know we're a success right now but the amount of resources that have gone into it it winds up getting clouded up in accounting where last mark did announce that they spent 10 billion dollars a year like on reality labs now reality labs covers a lot it was vr was not the large part of it also had portal and spark and the big ar research efforts and it's been expanding out to include ai and other things there where uh there's a lot going on there but 10 billion dollars was just a number that i had trouble processing it's just i feel sick to my stomach thinking about that much money being spent but that's how they they demonstrate commitment to this where it's not i'm more so than like yeah google goes and cancels all these projects different things i like that while meta is really sticking with the funding of vr and ar is still further out with it so there's something to be said for that i it's not just going to vanish the work's going in i just wish it could be",
        "start": "03:37:57",
        "duration": 222.16000000000003,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "all those resources could be applied more effectively because i see all these cases i point out these examples of how a third party that we're kind of competing with in various ways there's a number of these examples and they do work with a tenth of the people that we do internally uh and a lot of it comes from yes there's the small company can just go do it while in a big company you do have to worry about i you know is there some sdk internally that you should be using because another team's making it you have to have your cross-functional group meetups for different things you do have more concerns about you know about privacy or diversity and equity and safety of different things parental issues and things that a small startup company can just kind of you know cowboy off and do something interesting and there's a lot more that is a problem that you have to pay attention to in the big companies but i'm not willing to believe that we are within even a factor of two or four of what the efficiency could be you know i i am constantly kind of crying out for it's like we can do better than this and you wonder what the mechanisms to unlock that efficiency are you know i i don't there is some sense in a large company that like an individual engineer might not believe that they can change the world maybe you you delegate a little bit of the responsibility to be the one who changes the world in a big company i think but the reality is like the world will get changed by a single engineer anyway so if whether inside google or inside a startup it doesn't matter it's just like google and meta needs to help those engineers believe they're the ones that are going to decrease that latency it'll take one john carmack like the 20 year",
        "start": "03:39:48",
        "duration": 212.39900000000003,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "old carmack that's inside meta right now to change everything and i try to point that out and push people it's like try to go ahead and when you see something because there is you get the silo mentality where you're like okay i know something's not right over there but that's i'm staying in my lane here i and there's there's a couple people that i can you know i can think about that are willing to just like hop all over the place and man i treasure them the people that are just willing to they're fearless you know they will go over and they will go rebuild the kernel and change this distribution and go in and hack the firmware over here to to get something done right and that is relatively rare you know there's thousands of developers and you've got a small handful that are willing to operate at that level and you know and it's potentially risky for the the politics are you know are real in a lot of that and i'm in the you know very much the privileged position of i am you know i'm more or less untouchable there where i've been dinged like twice for it's like you said something insensitive in that post and i and you should probably not say that i am but for the most part yes i you know i get away with i every week i'm posting something you know pretty loud and opinionated in you know internally and i think that's useful for the company but i'm yeah it's not if it's rare to have a position like that and i can't necessarily offer advice for how someone can do that i well you could offer advice to a company in general to give a little bit of freedom for the young wild the wildest ideas come from the young minds uh and so you need to give the young minds freedom to to think big and wild",
        "start": "03:41:35",
        "duration": 200.80100000000004,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "and and crazy and for that they have to be opinionated they have to be um they have to think crazy ideas and thoughts and pursue them with a full passion without being slowed down by bureaucracy or managers and all that kind of stuff obviously startups really empower that but big companies could too and that's that's the design challenge for companies for big companies to see how can you enable that how can you power the big company there are so many resources there and they do amazing things do get accomplished but there's so much more that could come out of that and you know i'm hope i'm always hopeful i'm an optimist in almost everything you know i think things can get better i think that they can improve things that you go through a path and you're learning kind of what does and doesn't work and i'm not i'm not ready to be fatalistic about the kind of the outcome of any of that uh me neither i know too many good people inside of those large companies that are incredible you have a friendship with elon musk uh often when i talk to him he'll bring up how incredible of an engineer and just a big pink shader thinker you are his a huge amount of respect uh for you i just i've never been a fly on the wall between the discussion between the two of you i just wonder is there something you guys debate argue about discuss is there some interesting problems that the two of you think about you come from different worlds maybe there's some intersection in the in aerospace maybe there's some intersection in your new efforts in artificial intelligence in terms of thinking is there something interesting you could say about sort of the debates the two of you have so i think in some ways we do",
        "start": "03:43:15",
        "duration": 208.159,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "have a kind of similar background where we're almost exactly the same age and we had kind of similar programming backgrounds on the personal computers and you know even some of the the books that we would read and things that would kind of turn us into the people that we are today and i think there is a degree of sensibility similarities where you know we kind of call on the same things and kind of see the same opportunities in different technology and there's that sense of you know i always talk about the speed of light solutions for things and he's thinking about kind of minimum manufacturing and engineering and operational standpoints for things and so i mean i first met elon right at the start of the aerospace era where i wasn't familiar with uh you know i was still in my game dev bubble i really wasn't familiar with all the startups that were going and being successful and what went on with paypal and all of his different companies but you know i met him as i was starting to do armadillo aerospace and you know he came down with kind of his right-hand propulsion guy and we we talked about rockets you know what can we what can we do with this and it was kind of specific things about like how are how are our flight computers set up what are different propellant options i am you know what can happen with different uh different ways of putting things together and then in some ways he was certainly the biggest player in the sort of alt space community that was going on in the early 2000s he was the most well-funded although you know his funding in the larger scheme of things compared to a uh like a nasa or something like that was really tiny uh it was a lot more than i had at the time",
        "start": "03:44:59",
        "duration": 201.68199999999996,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "i but it was interesting i had a point years later when i realized okay my like my financial resources at this point are basically what elon's was when he went all in on spacex and tesla and there's i i think in many corners he does not get uh the respect that he should about being a wealthy person that could just retire and he went all in where he was really going to i you know he could have gone bust and there's plenty of people you look at the you know the sad athletes or or entertainers that had all the money in the world and blew it he could have been the business case example of that but i you know the the things that he was doing space exploration electrification of transportation uh solar city type things these are big world level things and i have a great deal of admiration that he was willing to throw himself so completely into that because in contrast with myself i was doing armadillo aerospace with this tightly bounded uh it was john's crazy money at the time that had a finite limit on it it was never going to impact me or my family uh if it completely failed and i was still hedging my bets working at id software at the time when he had been you know really all in there and i have a huge amount of respect for that and people do not the other thing i get irritated with is people that say it's like oh elon's just just a business guy you know he just got like he was gifted the money and he's just kind of uh investing in all of this when uh he was really deeply involved in a lot of the decisions you know not all of them were perfect but i you know he cared very much about engine material selection propellant selection and i you know for years he'd be kind of telling me it's like get off that",
        "start": "03:46:40",
        "duration": 230.719,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "hydrogen peroxide stuff it's like you know liquid oxygen is the only proper oxidizer for this and i you know and like the the times that i've gone through the factories with him we're we're talking very detailed things about like how this weld is made you know how this sub assembly goes together i you know what our like startup shutdown behaviors of the different things so he is you know really in there at a very detailed level and i think that he is the the best modern example now of someone that tries to that can effectively micromanage some decisions on things on both tesla you know and spacex to some degree where he cares enough about it i worry a lot that he stretched too thin that you get boring company and neuralink and twitter and all the other possible things there where i know i've got i i've got limits on how much i can pay attention to uh that i have to kind of box off different amounts of time and i look back at like at my aerospace side of things it's like i did not go all in on that i did not commit myself at a level that it would have taken to be successful there and i yeah and it's kind of a weird thing just uh like having a a discussion with he's the richest man in the world right now but he i you know he operates on you know on a level that is still uh very much in my wheelhouse on a technical side of things so doing that systems level type of thinking where you can go to the low level details and go up high to the big picture uh do you think in uh aerospace arena in the next five ten years do you think we're gonna put a human on mars like what do you think is the interesting uh no i do in fact i i made a bet with someone with a group of people kind of",
        "start": "03:48:35",
        "duration": 219.8389999999999,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "this about whether boots on mars by 2030 and this was kind of a fun you know a fun story because i was at an intel sponsored event and we had a bunch of just world-class brilliant people and we were talking about computing stuff but the after dinner conversation was like what are some other things how they're going to go in the future and one of the ones tossed up on the whiteboard was like boots on mars by 2030 and most of the people in the room thought yes you know they thought that like spacex is kicking ass we've got all this possible stuff i seems likely that it's going to go that way and i said no i think less than 50 chance that it's going to make it there and people you know we're kind of like oh i you know why the pessimism or whatever and of course i'm an optimist at almost everything but for me to be the the one kind of outlier saying no i don't think so um then i started saying some of the things i said well let's be concrete about it let's i bet ten thousand dollars that it's not gonna happen and this was this was really a startling thing to see that i again room full of brilliant people but as soon as like money came on the line and they were like do i want to put 10 000 i was not the richest person in the room uh there are people much better off than i was there's a spectrum but i am you know as soon as they started think it's like oh i could lose money by by keeping uh keeping my position right now and all these engineers they engaged their brain they started thinking it's like okay launch windows uh launch delays like how many times would it take to get this right what historical precedence do we have and i and then it mostly came down to it's like well what about in transit by 2030 and then i've you know what",
        "start": "03:50:24",
        "duration": 208.07999999999998,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "about i you know different things or would you hand would you go for 2032 but one of the people did go ahead and was optimistic enough to make a bet with me so i have a ten thousand dollar bet that by 2030. i think it's going to happen shortly thereafter i think there will probably be infrastructure on mars by 2030 but i don't think that we'll have humans on mars on 23rd i think it's possible but i think it's less than a 50 chance so i felt safe making that bet well i think you had an interesting point uh correct me if i'm wrong that's a dark one that's um that should perhaps help people appreciate elon musk which is in this particular effort elon is a critical is critical to the success spacex seems to be uh critical to 20 you know humans on mars by 2030 or thereabouts so if something happens to elon then all of this collapses and this is in contrast to the the other ten thousand dollar bet i made kind of recently and that was self-driving cars at like a level five running around uh cities and people have kind of nitpicked that that we probably don't mean exactly level five but the guy i'm having the bet with i is we're going to be we know what we mean about this jeff fatwood yeah coding horror and all yeah but i yeah i mean it's just he doesn't think that people are going to be riding around in robo taxis in 2030 uh in major cities just like like you take an uber now and i think it will you think it will and i think and the difference is everybody looks at this it's like oh but tesla's been wrong for you they've been promising it for years and it's not here yet and the reason this is different than the bet with mars is mars",
        "start": "03:52:09",
        "duration": 225.9220000000001,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "really is more than as comfortable a bet on elon musk i am you know that is you know that is his thing and he is really going to move heaven and earth to try to to make that happen and perhaps not even spacex yeah perhaps just elon musk yeah because if if elon went away and spacex went public and got a board of directors i there are more profitable things they could be doing than focusing on human presence on mars so this really is a sort of personal thing there and in contrast with that self-driving cars have a dozen credible companies working really hard and while yes it's going slower than most people thought it would betting against that is a bet against almost the entire world in terms of all of these companies that have all of these incentives it's not just you know one guy's passion project i and i do think that it is solvable i although there's i recognize it's not 100 chance because it's possible the long tail of self-driving problems winds up being an agi complete problem uh i think there's plenty of value to mine out of it with narrow ai and i think that it's you know it's going to happen probably more so than people expect but it's that whole sigmoid curve where you over you know you overestimate the near-term progress and you underestimate the long-term progress and i think self-driving is going to be like that and i think 2030 is still a pretty good bet yeah unfortunately um self driving is a problem that uh is safety critical meaning that if if you don't do it well people get hurt but the other side of that is people are terrible drivers so it is not going to be that's probably going to be the argument that gets it through is like we can save 10 000 lives a year by taking imperfect self-driving",
        "start": "03:54:02",
        "duration": 227.35999999999996,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "cars and letting them take over a lot of driving responsibilities it's like was it 30 000 people a year die in auto accidents right now in america and a lot of those are preventable and the problem is you'll have people that every time a tesla crashes into something you've got a bunch of people that literally have vested interest shorting tesla to come out and make it the worst thing in the world and people will be fighting against that but optimist in me again i think that we will have systems that are statistically safer than human drivers and we will be saving thousands and thousands of lives every year when we can hand over more of those responsibilities to it i do still think as a person who studied this problem very deeply from a human side as well it's still an open problem how good slash bad humans are driving it's a kind of funny thing we say about each other oh humans suck at driving um everybody except you of course like we think we're good at driving but i after really studying it i i think you start to notice you know because i've watched uh hundreds of hours of humans driving with the projects of this kind of thing you've noticed that even with the distraction even with everything else humans are able to to do some incredible things with the the with the attention even when you're just looking at the smartphone just to get cues from the environment to make less seconds decisions to use instinctual type of decisions that actually save your ass time and time and time again and are able to do that with so much",
        "start": "03:55:56",
        "duration": 201.27900000000002,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "uncertainty around you in such tricky dynamic environments i don't know i don't i don't know exactly how hard is it to beat that kind of skill of common sense reasoning this is one of those interesting things that there have been a lot of studies about how experts in their field usually underestimate the progress that's going to happen because an expert thinks about all the problems they deal with and they're like damn i'm going to have a hard time solving all of this and they filter out the fact that they are one expert in a field of thousands and you know you think about yeah i can't do all of that and you sometimes forget about the scope of the the ecosystem that you're embedded in and if you think back eight years very specifically the state of ai and machine learning where was that we we had just gotten resnets probably at that point and you look at all the amazing magical things that have happened in eight years and they do kind of seem to be happening a little faster in recent years also and you project that eight more years into the future where again i think there's a 50 chance we're gonna have signs of life of agi you know which we can put through driver's ed if we need to to actually build self-driving cars and i think that the narrow systems are going to to have real value demonstrated well before then so signs of life in agi you've mentioned that okay first of all you're one of the most brilliant people on this earth you could be solving a number of different problems as you've mentioned your mind was attracted to nuclear energy obviously virtual reality with the metaverse is something you could have a tremendous impact on so i do want to say a quick thing about nuclear energy where i",
        "start": "03:57:36",
        "duration": 207.76000000000002,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "you know this is something that i re this so precisely feels like aerospace before spacex where from everything that i know about all of these i the physics of this stuff hasn't changed and the reasons why things are expensive now are not fundamental i somebody should be going into a really hard elon musk style at uh vision economical fission not fusion where the fusion is the the kind of the the darling of people that want to go and do nuclear because it doesn't have the taint that fission has in a lot of people's minds but it's an almost absurdly complex thing where nuclear fusion is you look at the tokamax or any of the things that people are building and it's doing all of this infrastructure just at the end of the day to make something hot so that you can then turn into energy through a conventional power plant and all of that work which we think we've got line of sight on but even if it comes out then you have to do all of that immensely complex expensive stuff just to make something hot where nuclear fission is basically you put these two rocks together and they get hot all by themselves that is just that much simpler it's just orders of magnitude simpler and the actual rocks the refined uranium is not very expensive it's a couple percent of the the cost of electricity that's why i made that point where you could have something which was five times less efficient than current systems and if the rest of the plant was a whole bunch cheaper you could still be super super valuable so how much of the pie do you think could be solved by nuclear energy by fission so how how much could it become the primary source of energy on earth it could be most of it like the reserves of uranium as it stands now could not power the whole earth but i am you know you get into breeder reactors and",
        "start": "03:59:20",
        "duration": 231.04,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "thorium and things like that that you do for conventional fission uh there is enough fur for everything now i mean solar photovoltaic has been amazing you know it's i i one of my current projects is working on an off-grid system and it's been fun just kind of again putting my hands on all the stripping the wires and wiring things together and doing all of that and just having followed that a little bit from the outside over the last couple decades there's been semiconductor like magical progress in what's going on there so i'm all for all of that but it doesn't solve everything and nuclear really still does seem like the smart money bet for what you should be getting for baseband on a lot of things and solar may be cheaper for uh you know peeking over air conditioning loads during the the summer and things that you can push around in different ways but it's one of those things that's it's just strange how we've had the technology sitting there but these non-technical reasons on the social optics of it has been this major forcing function for something that you know really should be at the the cornerstone of all of the world's concerns with energy it's interesting how the non-technical factors have really dominated something that is so fundamental to kind of the existence of the human race as we know it today and much of the troubles of the world including wars in different parts of the world like ukraine is energy based and yeah it's just sitting right there to be solved that said uh i mean to me personally i think it's clear that if agi were to be achieved that would change the course of human history agi wise i was",
        "start": "04:01:16",
        "duration": 202.319,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "you know i was making this decision about what do i want to focus on after vr and i'm still working on vr regularly i spend a day a week kind of consulting with meta and i you know baz styles me the consulting cto is kind of like the sherlock holmes that comes in and consults on some of the specific tough issues and i'm still pretty passionate about all of that but i have been figuring out how to compartmentalize and force that into a smaller box to work on some other things and i did come down to this decision between working on economical nuclear fission or artificial general intelligence and uh the vision side of things i've i've got a bunch of interesting things going that way but it would take that would be a fairly big project thing to do i don't think it needs to be as big as people expect i do think something original spacex sized um you build it power your building off of it and then the government i think will come around to what you need to is everybody loves an existence proof i think it's possible somebody should be doing this but it's going to involve some politics it's going to involve decent sized teams and a bunch of this cross-functional stuff that i don't love while the artificial general intelligence side of things um it seems to me like this is the highest leverage moment for potentially a single individual potentially in the history of the world where the things that we know about the brain about what we can do with artificial intelligence uh nobody can say absolutely on any of these things but i am not a madman for saying that it is likely that the code for artificial general intelligence",
        "start": "04:02:58",
        "duration": 211.20100000000008,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "is going to be tens of thousands of lines of code not millions of lines of code this is code that conceivably one individual could write unlike writing a new web browser or operating system and based on the progress that ai has machine learning has made in the recent decade it's likely that the important things that we don't know are relatively simple there's probably a handful of things and my bet is that i think there's less than six key insights that need to be made each one of them can probably be written on the back of an envelope we don't know what they are but when they're put together in concert with gpus at scale and the data that we all have access to that we can make something that behaves like a human being or like a living creature and that can then be educated in whatever ways that we need to get to the point where we can have universal remote workers where anything that somebody does mediated by a computer and doesn't require physical interaction uh that an agi will be able to do we can already simulate the you know the equivalent of the zoom the zoom meetings with avatars and uh synthetic deep fakes and whatnot we can definitely do that uh we have super human capabilities on any narrow thing that we can uh that we can formalize and make a loss function for but there's things we don't know how to do now but i don't think they are unapproachably hard now that's incredibly hubristic to say that it's like but i think that what i said a couple years ago is a 50 chance that somewhere there will be signs of life of agi in 2030 and i've probably increased that slightly i may be at 55 60 now because i do think there's a little sense of acceleration there so i wonder what the and by the way you",
        "start": "04:04:44",
        "duration": 226.39999999999998,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "also written that i i bet with hindsight we will find that clear antecedents of all the critical remaining steps for agi are already buried somewhere in the vast literature of today so the ideas are already there i think that's likely the case one of the things that appeals to so many people including me about the promise of agi is we know that we're only drinking from a straw from the the fire hose of all the information out there i mean you look at just in a very narrowly bounded field like machine learning like you can't read all the papers that that come out all the time you can't go back and read all the clever things that people did in the 90s or earlier that people have forgotten about because they didn't pan out at the time when they were trying to do them with 12 neurons i am so that this idea that yeah i think there are gems buried in some of the older literature that was not the path taken by everything and you can see a kind of herd mentality on the things that happen right now it's almost funny to see like oh google does something and open ai does something meta does something and you know they're the same people that all talk to each other and they're all one-upping each other and they're all capable of implementing each other's work given a month or two after somebody has an announcement of that but there's a there's a whole world of possible approaches to machine learning and i think that we probably will in hindsight go back and see it's like yeah that was kind of clearly predicted by this early paper here i you know and this turns out that if you do this and this and take this result from from animal training and this thing from neuroscience over here and put it together and set up this curriculum for them to learn in that that's kind of what it took you don't have too many people now that",
        "start": "04:06:36",
        "duration": 209.04,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "are still saying it's not possible or it's going to take hundreds of years and 10 years ago you would get you would collect get a collection of experts and you would have a decent chunk on the margin that either say not possible or a couple hundred years might be centuries and the median estimate would be like 50 70 years and it's been coming down and i know with me saying eight years for something that still puts me on the optimistic side but it's not crazy out in the fringes and just being able to look at that at a a meta level about the trend of the the uh the trend of the predictions going down there the idea that something could be happening relatively soon now i do not believe in fast takeoffs you know that's one of the safety issues that people say it's like oh it's going to go foom and the ai's going to take over the world there's a lot of reasons i don't think that's a credible position and i think that we will go from a point where we start seeing things that that credibly look like uh look like animals behaviors and i have a human voice box wired into them uh it's like i tried to get elon to say it's like you're you're pig neurolink give it a human voice box and let it start learning human words i i think that you know i think animal intelligence is closer to human intelligence than a lot of people like to think and i think that culture and modalities of io are make the gulf seem a lot bigger than it actually is there's just that smooth spectrum of how the brain developed and cortexes and scaling of different things going on there cultural modalities of io yes language is um sort of lost in translation conceals a lot of intelligence and so when you think about signs of life for agi you're thinking about human interpretable science so the",
        "start": "04:08:21",
        "duration": 217.919,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "example i give if we get to the point where you've got a learning disabled toddler some some kind of real special needs uh child that can still interact with their favorite tv show and video game and can be trained and learned in some appreciably human-like way at that point you can deploy an army of engineers cognitive scientists education developmental uh developmental education people and you've got so many advantages there unlike real education where you can do rollbacks and a b testing and you can find a golden path through a curriculum of different things if you get to that point learning disabled toddler i think that it's uh it's going to be a done deal but do you think we'll we'll know it when we see it so uh there's there's been a lot of really interesting general learning progress from deep mind uh open the eye a little bit too i tend to believe that tesla autopilot deserves a lot more credit than is getting for making progress on the general yeah on sort of on the doing the multitask learning thing and increasing the number of tasks and automating that process of uh sort of learning from the edge discovering the edge cases and learning from the edge cases that is it's really approaching from a different angle the general learning problem of agi but the more clear approach comes from deep mind where you have these kind of game situations and you uh build systems there but i i don't know um people seem to be quite um yeah there will always be people that just won't believe it and i fundamentally don't care i mean i don't care if they don't believe it i you know when it starts doing people's jobs and i",
        "start": "04:10:10",
        "duration": 213.52100000000002,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "mean like i don't care about the philosophical zombie argument absolutely absolutely but will you do you think you will notice that something special has happened here and or um because to me i've been noticing a lot of special things i think a lot of credit should go to deep bind for alpha's zero that was truly special so self-play mechanisms achieve sort of solve problems that used to be thought unsolvable like the game of go also i mean protein folding starting to get into that space where learning is doing at first there's not it wasn't entirely learning and so and now it's end-to-end learning of the of a very difficult previously thought unsolvable problem of protein folding and so um yeah it would do where where do you think would be a really magical moment for you there have been incredible things happening in recent years like you say all of the the things from deepmind and open ai that have been huge showpiece things but when you really get down to it and you read the papers and you look at the way the models are going you know it's it's still like a feed forward you push something in something comes out i on the end i mean maybe there's diffusion models or monte carlo tree rollouts and different things going on but it's not a being it's not close to a being i am that's that's going through a you know a lifelong learning process do you want something that kind of gives signs of a being like what's the difference between a neural network a feed forward neural network and a being where's the fundamentally the brain is a",
        "start": "04:11:57",
        "duration": 209.67900000000003,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "recurrent neural network generating an action policy i mean it's implemented on a biological substrate and it's interesting thinking about things like that where we know fundamentally the brain is not a convolutional neural network or a transformer those are specialized things that are very valuable for what we're doing but it's not the way the brain's doing now i do think consciousness and ai in general is a substrate independent mechanism where it doesn't have to be implemented the way the brain is but if you've only got one existence proof there's certainly some value in caring about what it says and does i am and so the the idea that anything that can be done with a narrow ai that you can quantify up a loss function for or reward mechanism you're almost certainly going to be able to produce something that's more resource effective to train and deploy and use in an inference mode you know train a whole lot using an inference but uh a living being is going to be something that's a continuous lifelong learned task agnostic thing and learning is really important too and the long-term memory so memories is a big part of that we've got you know again i have all the respect in the world for the amazing things that are being done now but sometimes they can be taken a little bit out of context with things like like there's some smoke and mirrors going on like the gato the recent work the multi-task learning stuff you know it's amazing that it's the one it's one model that plays all the atari games i am as well as doing all these other things but i of course it didn't learn to do all of those it was instructed in doing that by other reinforcement learners going through and doing that and even in the case of all the games",
        "start": "04:13:42",
        "duration": 205.841,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "it's still going with a specific hand-coded reward function in each of those atari games where it's not that you know how does it just wants to spend its summer afternoon playing atari because that's the most interesting thing for it so it's again not a general it's not learning the way humans learn and there's i believe a lot of things that are challenging to make a loss function for that you can train uh through these existing conventional things we're going to chip away at all the things that people do um that we can turn into narrow ai problems and billions of probably trillions of dollars of value are going to be created by that but there's still going to be a set of things and we've got questionable cases like the self-driving car where it's possible it's not my bet but it's it's plausible that the long tail could be problematic enough that that really does require a full-on artificial general intelligence i the counter argument is that data solves almost every everything is an interpolation problem if you have enough data and tesla may be able to get enough data from all their deployed stuff to be able to work like that but maybe not and there are all the other problems about like say you want to have a strategy meeting and you want to go ahead and bring in all of your remote workers and your consultants and you want a world where some of those could be ais that are you know that are talking and interacting with you in a an area that is too murky to have a crisp loss function but they still have things that on some level they're they're rewarded on some internal level for building a valuable to humans uh kind of life and ability to interact with things see i i still think that uh self-driving",
        "start": "04:15:24",
        "duration": 202.95900000000003,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "cars solving that problem will take us very far towards agi you might not need agi but i am really inspired by what autopilot is doing uh waymo so these some of the other companies i think waymo leads the way there is also really interesting but they don't have quite as ambitious of an effort in terms of learning based sort of data-hungry approach to driving which i think is very close to the kind of thing that would take us far towards agi yeah and it's a it's a funny thing because as far as i can tell elon is completely serious about all of his concerns about agi you know being an existential threat and you know i i tried to draw him out to talk about ai and he just didn't want to and i think that you know i get that little fatalistic sense from him and it's weird because his company could very well be the leading company leading towards a lot of that where uh tesla being a super pragmatic company uh that's doing things because they really want to solve this actual problem it's a different vibe than the research oriented companies where it's a great time to be an ai researcher you've got your pick of trillion dollar companies that will you know that will pay you to kind of work on the problems you're interested in but that's not necessarily driving hard towards the the core problem of agi as something that's going to produce a lot of value by doing things that you know that people currently do or would like to do i mean i have million questions to you uh about your ideas about agi but do you think it needs to be embodied do you think it needs to have a body to start to notice the signs of life and to develop the kind of system that's able to reason perceive the world in the way",
        "start": "04:17:06",
        "duration": 207.4390000000001,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "that an agi should and act in the world so should we be thinking about robots or can this be achieved in a purely digital so i have a clear opinion on that and that's that no it does not need to be embodied in the physical world where you could say most of my career is about making simulated virtual worlds you know in games or virtual reality and so on a fundamental level i believe that you can make a simulated environment that provides much of the value of what the real environment does and restricting yourself to operating at real time in the physical world with physical objects i think is an enormous handicap i mean that's one of the real lessons driven home by all my aerospace work is that i've you know reality is a in so many ways there we're dealing with all the mechanical components like everything fails murphy's law even if you've done it right before on your fifth one it might come out differently so yeah i think that anybody that that is all in on the embodied aspect of it they are tying a huge weight to their ankles and i think that i i would almost count them out anybody that's making that a cornerstone of their belief about it i would almost write them off as being worried about them getting to agi first i was very surprised that elon's big on the uh the humanoid robots i mean like the nasa robonaut stuff was always almost a gag line like what are you doing people well that's very interesting because i he has a very pragmatic view of that that's just the um a way to solve a particular problem in a factory now i do think that once you have an agi robotic bodies humanoid bodies are going to be enormously valuable i just don't think they're helpful getting to agi well here's a very sort of practical view which i",
        "start": "04:18:50",
        "duration": 210.48100000000005,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "disagree with and i argue with him but it's a practical view that there's you know you could transfer the the problem of driving to the problem of uh robotic manipulation because so much of it is perception it's perception and action and it's just a different context and so you can apply all the same kind of data engine learning processes to a different environment and so why not apply to the humanoid robot environment but i think i i do think that there's a certain magic to the embodied robot that may be the thing that finally convinces people yes but again i don't really care that much about convincing people you know the the world that i'm looking towards is you know you i you you go to the website and say i want five frank one a's to you know to work on my team today and they all spin up and they start showing up in your zoom meetings to push to push back but also to agree with you but first to push back i do think you need to convince people for them to welcome that thing into your life into their life i think there's enough businesses that operate on an objective kind of profit loss sort of basis that i mean if you look at how many things again talking about the the world as an evolutionary space there when you do have free markets and you have entrepreneurs uh you're going to have people that are going to be willing to go out and try whatever crazy things and when it proves to be beneficial you know there's fast followers in all sorts of places yeah and and you're saying that i mean you know quake in vr is a kind of embodiment but just in a digital world and if if you're able to demonstrate if you're able to do something productive in that kind of digital",
        "start": "04:20:35",
        "duration": 206.64200000000002,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "reality uh then then agi doesn't need to have a body yeah it's like one of the really practical technical questions that i kind of keep arguing with myself over if you're doing a training and learning and you've got like you can watch sesame street you can play master system games or something is it enough to have just a video feed that that is that video coming in or should it literally be on a virtual tv set in a virtual room even if it's you know a simple room just to have that sense of you're looking at a 2d projection on a screen versus having the screen beamed directly into your retinas and i you know i think it's possible to maybe get past some of these signs of life of things with the uh just kind of projected directly into the receptor fields but eventually for more uh kind of human emotional connection for things probably having some vr room with a lot of screens in it for the ai to be learning in is likely helpful it may be a world of different ais interacting with each other self-play i do think is one of the critical things where socialization wise one of the other limitations i set for myself thinking about thing these is i i need something that is at least potentially real time because i want it's nice you can always slow down time you can run on a subscale system and and test an algorithm at some lower level and if you've got extra horsepower running it faster than real time is a great thing but i want to be able to i am to have the ais either socially interact with each other or critically with actual people your sort of child development psychiatrist that comes in and interacts and does the the good boy bad boy sort of thing i as they're going through and exploring different things and it's nice to",
        "start": "04:22:20",
        "duration": 215.59999999999994,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "i come back to the value of constraints in a lot of ways and if i say well one of my constraints is real-time operation i mean it might still be a huge data center full of computers but it should be able to interact on a zoom meeting with people and that's how you also do start convincing people even if it's not a robot body moving around which eventually gets to irrefutable levels but if you can go ahead and not just type back and forth to a gpt bot on something but you're literally talking to them in an embodied over zoom form and working through problems with them or exploring situations having conversations that are fully stateful and learned i think that you know i think that that's a valuable thing so i do keep all of my eyes on on things that can be implemented within sort of that 30 frames per second i kind of work and i think that's feasible do you think the most compelling experience is that first will be for pleasure or for business as they ask in airports so uh meaning is is it if it's interacting with ai agents will it be sort of uh like friends um entertainment almost like a therapist or whatever that kind of interaction or is it in the business setting something like you said brainstorming different ideas so this is all a different formulation of kind of a touring test or the spirit of the original touring test where do you think the biggest benefit will first come so it's going to start off hugely expensive i mean you're going to if we're still all guessing about what compute is going to be necessary i fall in the side of i don't think you run the numbers and you're like 86 billion",
        "start": "04:24:07",
        "duration": 208.95899999999997,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "neurons 100 trillion synapses i don't think those all need to be weights i don't think we need models that are quite that big evaluated quite that often you know i base that on we've we've got reasonable estimates of what some parts of the brain do we don't have the we don't have the neocortex formula but we kind of get some of the other sensory processing and it doesn't feel like we need to we can simulate that in computers for less weights but still it's probably going to be thousands of gpus to be running uh you know a human level agi depending on how it's implemented that might give you sort of a clan of 128 kind of run-in batch people depending on whether there's sparsity in the way that the weights and things are set up if it is a reasonably dense thing then just the memory bandwidth trade-offs means you get 128 of them at the same time and either it's all feeding together learning in parallel or kind of all running together uh kind of talking to a bunch of people but still if you've got thousands of gpus uh necessary to run these things it's going to be kind of expensive where it might start off i'm a thousand dollars an hour for your you know even post development or something for that which would be something that you would only use for a business uh you know something where you think they're gonna help you make a strategic decision or point out something super important but i also am completely confident that we will have another factor of a thousand in cost performance increase in agi type calculations uh not in general computing necessarily but there's so much more that we can do with packaging making those right trade-offs all those same types of things that in the couple next couple decades 1000x easy and then you're down to a dollar an hour and then you're kind of like well i should have an entourage of ais that are you",
        "start": "04:25:51",
        "duration": 212.31900000000005,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "know following me around helping me out on anything that i want them to do that's one interesting trajectory but i'll i'll i'll push back because i have um so uh for in that case if you want to pay thousands of dollars it should actually provide some value i think it's easier for cheaper to provide to provide value via a dumb ai uh that will take us towards agi to just have a friend i think there's an ocean of loneliness in the world and i think an effective friend that doesn't have to be perfect doesn't have to be intelligent it has to be empathic having emotional intelligence having ability to remember things having ability to listen most of us don't listen to each other one of the things that love and when you care about somebody when you love somebody is when you listen and that is something we treasure about each other and and if an ai can do that kind of thing um i think that provides a huge amount of value and very importantly provides value in its ability to listen and understand versus provide really good advice i think providing really good advice is very difficult is another next level step that would um i think it's just easier to uh to do companionship yeah i wouldn't disagree i mean i think that there's very few things that i would argue can't be reduced to a uh some kind of a narrow ai i think we can do trillion dollars of value easily and all the things that can be done there and a lot of it can be done with smoke and mirrors without having to go the whole thing i mean there's going to be",
        "start": "04:27:38",
        "duration": 208.24099999999999,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "the equivalent of the doom uh the doom version for the agi that's not really agi it's all smoke and mirrors but it happens to do enough valuable things that it's enormously uh useful and valuable to people but at some point you do want to get to the point where you have the fully general thing and you stop making bespoke specialized systems for each thing and you wind up start using the higher level language instead of writing everything in assembly language what about consciousness the c word do what do you think that's fundamental to solving agi or is it a quirk of human cognition so i think most of the arguments about consciousness don't have a whole lot of merit i think that consciousness is kind of the way the brain feels when it's operating yes and this idea that you know i do generally subscribe to sort of the pandemonium theories of consciousness where there's all these things bubbling around and i think of them as kind of slightly randomized sparse distributed memory bit strings of things that are kind of happening recalling different associative memories and eventually you get some level of consensus and it bubbles up to the point of being a conscious thought there and the little bits of stochasticity that are sitting on in i in this as it cycles between different things and recalls different memory that's largely our imagination and creativity um so i don't think there's anything deeply magical about it certainly not symbolic i think it is generally the flow of these uh associations drawn up with static stochastic noise overlaid on top of them i think so much of that is like it",
        "start": "04:29:23",
        "duration": 200.95999999999998,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "depends on what you happen to have in your field of view as some other thought was occurring to you that overlay and blend into the next key that queries your memory for things and that kind of determines how you know how your chain of consciousness goes so that's kind of the qualia the subjective experience of it is not is not essential for intelligence i think so i don't think there's anything really important there what about some other human qualities like fear of mortality and stuff like that like um the fact that this ride ends is that is that important like you you me you know we talk so much about this conversation about the value of deadlines and constraints um do you think that's important for intelligence actually a super interesting angle that uh that i don't usually take on that about has death being a deadline that forces you to make better decisions because i have heard people talk about how if you have immortality people are going to stop stop trying and working on things because they've got all the time in the world i am but i would say that i don't expect it to be a super critical thing that uh that a sense of mortality and death impending death is necessary there because those are things that they do wind up providing reward signals to us and we will be in control of the reward signals and there there will have to be something fundamental that causes that engenders curiosity and goal setting and all of that i am something is going to play in there at the reward level i am you know whether it's positive or negative or both i don't have any strong opinions on exactly what it's going to be i but that's that type of thing where i doubt that might be one of those half dozen",
        "start": "04:31:04",
        "duration": 200.08,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "key things that has to be sorted out on exactly what the master reward that's the meta reward over all of the uh the local task specific rewards have to be that could be that big negative reward of death maybe not death but ability to walk away from an interaction so it bothers me when people treat ai systems like servants so it doesn't bother me but i mean it it's it really is drawing the line between what an ais system could be it's limiting the possibility of an asset could be is treating them as justice tools now that's of course for from a narrow ai perspective there's so many uh problems that narrow ai could solve just like you said as in in its form of a tool but it could also be a being which is much more than a tool and to be a to become a being you have to respect that thing for being a being and for that it has to be able to have um to make its own decisions to walk away to say i had enough of you i would like to break up with you now uh you've not treated me well and i would like to move on so uh i think that actually that choice to end things so i i a couple of things on that so on the one hand uh it is kind of disturbing when you see people being like people that are mean to robots and you know mean to alexa whatever and that seems to speak badly about humanity but there's also the exact opposite side of that where you have so many people that imbue humanity in inanimate objects or things that are toys or that are are relatively limited so i think there may even be more more danger about people putting more emotional investment into a lot of these",
        "start": "04:32:44",
        "duration": 222.48000000000008,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "proto ais in different ways yeah um and then the ai would manipulate that but as far as like the ai ethnic sides of things i really stay away from any of those discussions or even really thinking about it it's similar with the safety things where i think it's just premature and there's a certain class of people that enjoy thinking about impractical things things are not in the world and you know of pragmatic effect around you and i think that begin again because i don't think there's going to be a fast takeoff i think we actually will have time to have these debates when we know the shape of what we're debating and some people do take a principled approach that they think it's going to go too fast that you really do need to get ahead of it that you need to be thinking about this because we have slow processes of coming to any kind of consensuses or even coming up with ideas about this and maybe that's i maybe that's true i wouldn't put any of my money or funding into something like that because i don't think it's a problem yet and i think that we will have these signs of life when when we've got our learning disabled toddler we should really start talking about some of the safety and ethics issues but probably not before then can you elaborate briefly about why you don't think there'll be a fast take off is there some deep intuition you have about it does it because it's grounded in the physical world or why yeah so it is my belief that we're going to start off with something that requires thousands of gpus and i i don't know if you've tried to go get a thousand gpu instance on a cloud anytime recently but these are not things that you can just go spin up",
        "start": "04:34:35",
        "duration": 194.23899999999998,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "hundreds of i there are real challenges to i mean these things are going to take data centers and data centers take years to build you know and the last few years we've seen a few of them kind of coming up going in different places they're big engineering efforts you can hear people bemoan about the fact that i know oh the the network was wired all wrong and it took them a month to go unwire it and rewire it the right way these aren't things that you can just magic into existence and the ideas of i am like the old tropes about it's going to escape onto the internet and take over other systems there's the fast takeoff ones are clearly nonsense because you just can't open tcp connections above a certain rate no matter how smart you are even if you have perfect hacking ability that take over the world in an instant sort of thing just isn't plausible at all and even if you had access to all of the resources these are going to be specialized systems where you're going to wind up with something that is architected around exactly this chip with this interconnect and it's not just going to be able to be plopped somewhere else now interestingly it is going to be something that the entire um the entire code for all of it will easily fit on a thumb drive that's total spy movie thriller sorts of things where you could have hey we cracked the secret to agi and it fits on this thumb drive and anyone could steal it now they're still gonna have to build the right data center to deploy it and have the right kind of life experience curriculum to take it up to the point where it's valuable but the real core of it the the magic that's going to happen there is going to be very small you know it's again tens of thousands of lines of code not millions of lines of code it is possible to imagine a world as you mentioned in the spy thriller",
        "start": "04:36:13",
        "duration": 200.48,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "view if it's if it's just a few lines of code we can imagine a world where the surface of computation is growing maybe growing exponentially meaning there's you know the refrigerators start getting a gpu and uh just every first of all the smartphones the billions of smartphones but maybe if there become highways through which code can spread across the entirety of the computation surface then you don't any longer have to book aws um gpus there's real fundamental issues there when you start getting down to taking an actual problem and putting it on an abstract machine like that that has not worked out well in practice and the idea that there was always like it's always been easy to come up with ways to get com compute faster to say more flops or more more gigaops or whatever there that's usually the easy part but you then have interconnect and then memory for what goes into it and when you talk about saying well cell phones well you're limited to like a 5g connection or something on that and if you say how if you take your your calculation and you factor it across a million cell phones instead of a thousand gpus in a warehouse you might be able to have some kind of a substrate like that but it could be operating then at 1 1000 the speed and so yes you could get you could have an agi working there but it wouldn't be a real-time agi it would be something that is operating at really a snail's pace you know much much slower than kind of human level thought for things yeah i'm not worried about that problem you're transferring the",
        "start": "04:37:53",
        "duration": 208.32199999999997,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "problem into the interconnect the communication the shared memory the the collective intelligence aspect of it which is extremely difficult as well yeah i mean it's back to the very earliest days of super computers you still have the the balance between bandwidth storage and computation and sometimes they're easier to get one or the other but it's been remarkably constant across all those years that you still need all three what do your efforts now you mentioned to me that you're really committing to ai at this stage what what do you see your life in the next few months years look like what what do you hope to achieve uh achieve here so i literally just this week signed a term sheet to to take some investment money for my company where the last two years i had backed off from meta and i was still doing my consulting cto role there but i had styled it as i was going to take the the victorian gentleman scientist route where i was going to be the you know the wealthy person that was going to go pursue science and learn about this and do experiments and honestly i'm surprised there aren't more people like that that are like me technical people that made a bunch of money and are interested in some of these possibly the biggest leverage point in human history i mean i know of i've heard of a couple organizations that are basically led by one rich techie guy that uh gets a few people around him to try to work on this but i'm surprised that there's not more that there aren't like a dozen of them i i mean maybe people are still think that it's an unapproachable problem that it's kind of beyond their ability to to get a wrench on and have some effect on like whatever startups they've run before but i that was my kind of",
        "start": "04:39:37",
        "duration": 213.03999999999994,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "like with all the stuff i've learned whether it's gaming aerospace whatever i i go through a larval phase where i'm like okay i'm sucking up all of this information trying to see is this something that i can actually do is this something that's practical to devote a large chunk of my life to and i've gone through that with the with the ai machine learning space of things and i and i think i've got my arms around it i've got the measure of it where some of the most brilliant people in the world are working on this problem but nobody knows exactly the path that it's going on we're throwing a lot of things at the wall and seeing what sticks i but i have a you know another interesting thing just learning about all of this the the contingency of your path to knowledge and talking about the associations and the context that you have with them where people that learn in the same path will have similar thought processes and i think it's useful that i come at this from a different background different history than the people that have had the largely academic backgrounds for this where i have huge blind spots that that they could easily point out but i have a different set of experiences in history and approaches to problems and systems engineering that i'm you know that might turn out to be useful and i can afford to take that bet where i'm not going to be destitute i am i was you know i've been i have enough money to fund myself working on this for the rest of my life but what i was finding is that i was i'm i was still not committing where i had a foot firmly in the vr and meta side of things where in theory i've got i've got a very nice position there i only have to work one day a week for my my consulting role but but i was engaging every day i'd still",
        "start": "04:41:24",
        "duration": 209.67800000000005,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "be like my computer's there i'd be going and checking the workplace and notes and testing different things and communicating with people but uh but i did make the the decision recently that no i'm gonna get serious i'm still gonna keep my ties with meta but i am seriously going for the agi side of things and it's actually a really interesting point because a lot of the machine learning the ai community is quite large but really basically almost everybody has taken the same trajectory through life uh in that community and it's so interesting to have somebody like you with a fundamentally different trajectory and that's where the big solutions can come because there's a kind of silo and it's it is a bunch of people kind of following the same kind of set of ideas and i was really worried that i didn't want to come off as you know like an arrogant outsider for things where i have all the respect in the world for the work that's you know it's been a miracle decade it's we're in the midst of a scientific revolution happening now and everybody doing this is i you know these are the the einsteins and boars and whatever's of our our modern era i am and i was really happy to see that the the people that i've sat down and talked with everybody does seem to really be quite great about just happy to talk about things willing to acknowledge that we don't know what we're doing we're figuring it out as we go along and i mean i've got a you know a huge debt on this where this all really started for me because sam altman basically tried to recruit me to open ai and it was at a point when i didn't know",
        "start": "04:43:08",
        "duration": 187.52000000000004,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "anything about what was really going on in machine learning uh and in fact it's funny how the first time you reached out to me it's like four years ago for your ai podcast for people yeah for people who uh uh listening to this should know that first of all obviously i'm i've been a huge fan of yours for the longest time but we've agreed to talk like yeah like four years ago back when this was called the artificial intelligence podcast we wanted to do a thing and we said you said yes and then i said it's like i don't know anything about modern ai that's right i said i could kind of take an angle on machine perception because i you know i'm doing a lot of that with the sensors and the virtual reality but we could probably find something to talk about and then so i mean and that's where when did sam talk to you about open ai around the same time no i was a little bit it was a bit after that so i had done the the most basic work i had kind of done the neural networks from scratch where i had gone and written it all in c just to make sure i understood back propagation at the at the lowest level and my my nuts and bolts approach but but after sam approached me i you know it was flattering to think that he thought that i i could be useful at open ai largely for kind of like systems optimization sorts of things i am you know without being an expert but i asked uh you know ilya sutscover to give me a reading list and he gave me a you know a binder full of all the papers that like okay these are the important things if you really read and understand all of these you'll know like 80 of what most of the you know the machine language researchers work on and and i went through and i read all those papers multiple times and highlighted them and went through and kind of figured the things out there and then started branching out into my own sets of",
        "start": "04:44:42",
        "duration": 208.8799999999999,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "research on things and eventually started writing my own experiments and doing kind of figuring out you know finding out what i what i don't know what the limits of my knowledge are and starting to get some of my angles of attack on things the things that i think are a little bit different from uh from what people are doing and i've had a couple years now like two years since i i kind of left the full-time position at meta and now i've kind of pulled the trigger and said i'm gonna get serious about it but some of my lessons all the way back to armadillo aerospace about how i know i need to be more committed to this where there is that it's both a freedom and a cost in some ways when you know that you're wealthy enough to say it's like this doesn't really mean anything i can i can spend you know i can spend a million dollars a year for the rest of my life and it doesn't mean anything it's fine uh but that is an opportunity to just kind of meander i and i could see that in myself when i'm doing some things it's like oh this is a kind of interesting curious thing let's look at this for a little while let's look at that it's not really bearing down on the problem so there's a few things that that i've done that are kind of tactics for myself to make me more effective like one thing i noticed i i was not doing well is i had a google cloud account with uh to get gpus there and i was finding i was very rarely doing that for no good psychological reasons where i'm like oh i can always think of something to do other than to spin up instances and run an experiment i can you know keep working on my local titans or something uh but it was really stupid i mean it was not a lot of money i should have been running more experiments there so i thought to myself",
        "start": "04:46:26",
        "duration": 198.48,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "well i'm gonna go buy a quarter million dollar dgx station i'm gonna just like sit it right there and it's gonna mock me if i'm not using it if the fans aren't running on that thing i'm not properly utilizing it and that's been helpful you know i've done a lot more experiments since then it's been it's been interesting where i thought i'd be doing all this low level envy link optimize stuff but ninety percent of what i do is just spin up four instances of an experiment with different hyper parameters on it oh you are you're doing i'm like really sort of building up intuition by doing ml experiments of different kinds but so the next big thing though is i am you know i decided that i was going to take some take some investor money because i i have an overactive sense of responsibility about other people's money i am yeah and it's like i i don't want i mean a lot of my my push and my passionate entreaties for things that meta are it's like i don't want zuck to have wasted his money investing in oculus i want it to work out i want it to change the world i want it to be worth all of this time money and effort going into it and i expect that it's going to be that like that with my uh with my company where it's a huge forcing function yeah this investment investors that are are going to expect something of me now we've all had the conversation that this is a low probability long-term bet it's not something that there's a million things i could do that i would have line of sight on the value proposition for this isn't that i think there are there are unknown unknowns in the way but it's one of these things that it's you know it's hyperbole but it's potentially one of the most important things humans ever do and it's something that i think is",
        "start": "04:48:06",
        "duration": 201.60000000000002,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "within our lifetimes if not within a decade um to happen so yeah this is just now happening like term sheet like the ink is barely links barely dry on drying i mean as i mentioned you're offline like somebody i admired um some of you know andre kapathi i think the two of you different trajectories in life but approach problems similarly in that he codes stuff from scratch up all the time and i he's created a bunch of little things outside of even outside the course at stanford that have been tremendously useful to build up intuition about stuff but also to help people and uh they're all in the realm of ai um do you see yourself potentially doing things like this or build you know not necessarily solving a gigantic problem but on the journey on the path to that building up intuitions uh and um uh sharing code or ideas or systems that um give inklings of agi but also kind of are useful to people in some way so yeah first of all andre is awesome i learned a lot when i was going through my larval phase from his blog posts and his stanford course and you know super valuable i got to meet him first a couple years ago when i was first kind of starting off on my gentleman scientist bit and just uh just a couple months ago when he went out on his sabbatical he stopped by in dallas and we talked for a while and i'm i had a great time with him and then when i heard he actually left tesla i did of course along with a hundred other people say hey if you ever want to work with me uh it would be an honor yeah so i'm he thinks that he's going to be doing this educational work but i think someone's going to make him an offer he can't refuse before he gets too far along on it oh",
        "start": "04:49:46",
        "duration": 219.35999999999999,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "his cur his current interest is educational it's like yeah um he's a special mind yeah is there something you could speak to what makes him so special something you understand like he did he was very much a programmer's programmer that was doing machine learning work rather than it's a different feel than an academic where you can see it in paper sometimes where somebody that's really a mathematician or a statistician at heart and they're they're doing something with machine learning but uh you know andre is about getting something done and you could see it in like all of his earliest approaches to it's like okay here's how reinforcement learning works here's how recurrent neural networks work here's how transformers work here's how i am you know crypto works and i am and yeah it's just he's a hacker's you know one of his old posts was like a hacker's guide to machine learning yeah and you know he deprecated that and said don't really pay attention to what's in here but it's that thought that uh that carries through in a lot of it where it is that back again to that hacker mentality and the hacker ethic with what he's doing and in sharing all of it yeah and a lot of his approach to a new thing like like i said larva stage is let me code up the simplest possible thing to build up intuition about it yeah like i say i sketch with structs and things when i'm just thinking about a problem i'm thinking in some degree of code you are also among many things a martial artist both judo and jiu-jitsu how has this helped make you the person you are so i mean i was a competent club player in judo and grappling i mean i was you know by no means any kind of a superstar but it was i went through a few phases with it where i did some i'm when i was quite",
        "start": "04:51:36",
        "duration": 207.282,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "young a little bit more when i was 17 i am and then i got into it kind of seriously in my mid-30s and you know i went pretty far with it and i was you know pretty good at some of the things that i was doing and i did appreciate it quite a bit where and on the one hand it's always if you're going to do exercise or something it's a more motivating form of exercise if someone is if someone is crushing you you're like motivated to to do something about that to up your attributes and be better about getting out there but there's also that sense that i'm you know i was not i was not a sports guy i did do wrestling in uh in junior high and i often wish that i think i would have i would have been good for me if i'd carried that on into high school and had a little bit more of that i mean it's like i i you know filled a little bit of wrestling vibe with always going on about in great embracing the grind and like that push that i associate with the wrestling team that that i in hindsight i wish i had gone through that and pushed myself that way but even getting back into judo and jiu jitsu in in my mid-thirties as usually the old man on the mat with that there was still the you know the sense that i you know working out with the the group and having the the guys that you're beating beating each other up with it but you just feel good coming out of it and i can remember those driving home aching in various ways and just thinking it's like oh that was that was really great and i you know it's mixing with a bunch of people that had nothing to do with any of the things that uh that i worked with you know every once in a while some would be like oh you're the doom guy and i but for the most part it was just different slice of life i'm you know a good thing and i i made the call when i was 40",
        "start": "04:53:20",
        "duration": 212.8,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "that's like maybe i'm getting a little old for this i i had separated a rib and tweaked a few things and uh without any really bad injuries and i was like have i dodged enough bullets should i you know should i hang it up i went back uh i've i've gone a couple times in the last decade trying to get my kids into it a little bit i didn't really stick with any of them but it was fun to get back on the mats i really hurts for a while when you haven't gone i gone for a while but i still debate this pretty constantly my brother's only a year younger than me and he's going kind of hard in jiu jitsu right now and i you know he was just he won a few medals at the last tournament he was at competing yeah and i was thinking yeah i guess we're in the executive division if you're over 50 or over 45 or something and it's not out of the question that i go back at some point and do some of this but again i'm just reorganizing my life around more focus probably not going to happen i'm pushing my exercise around to give me longer uninterrupted intellectual focus time pushing it to the beginning or the running and stuff like that walking yeah yeah running in calisthenics and some things like that but it allows you to still think about a problem but if you're going to a judo club or something you're you've got it fixed it's going to be seven o'clock or whatever 10 o'clock on saturday uh although i talked about this a little bit when i was on rogan and shortly after that carlos machado did reach out and i had trained with him for years i back in the day and he was like hey we've got kind of a small private club with a bunch of uh executive type people and uh it gets it does tempt me yeah i don't know if you know him but john donahue moved here to austin",
        "start": "04:55:07",
        "duration": 207.20000000000002,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "uh with gordon ryan and a few other folks and he has a very interesting way very deep systematic way of thinking about jiu jitsu that reveals the the chess of it the the the like the the science of it and i do think about that more as kind of an older person considering the martial arts where i can remember the the very earliest days getting back into judo and i'm like teach me submissions right now you know it's like learn the arm bar learn the choke i but yeah as you get older you start thinking more about it's like okay i really do want to like learn the entire canon of judo it's like are all the different things there and like all the different approaches for it not just the you know if you want to compete there's just a handful of things you learn really really well but sometimes there's interest in learning a little bit more of the scope there and figuring some things out from you know at one point i had wasn't exactly a spreadsheet but i did have a you know a big long text file with like here's the things that i learned in here like ways you chain this together and while when i went back a few years ago it was good to see that i whipped myself back into reasonable shape about doing the basic grappling but i know there was a ton of the subtleties that were just that were gone but could probably be brought back reasonably quickly and there's also the benefit i mean you're exceptionally successful now um you're brilliant and the problem the old problem with the ego yeah is uh i still pushed kind of harder than i should i mean that was i was one of those people that i yeah i'm i'm on the smaller side for uh for a lot of the people competing and i would you know",
        "start": "04:56:50",
        "duration": 195.43999999999994,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "i'd go with all the big guys and i'd go hard and i'd push myself a lot and that would be one of those where i would i you know i'd be dangerous to anyone for the first five minutes but then sometimes after that i'm already dead and i knew it was terrible for me because it made the no it meant i got less training time with all of that when you go and you just gas out you know relatively quickly there and i like to think that i would be better about that where after i gave up judo i started doing the half marathons and tough mudders and things like that and so when i did go back to the the local judokai club i thought it's like oh i should have better cardio for this because i'm a runner now and i do all of this and didn't work out that way it was the same old thing where just push really hard strain really hard and and of course when i worked with good guys like carlos it's like he just the whole flow like water thing is real and he's just like that's true with judo too some of the best people like i've trained with olympic gold medalists and for some reason with them everything's easier everything it's you actually start to feel the science of it the music of it the dance of it and it's everything is effortless um you understand that there's an art to it it's not just an exercise it was interesting where i did go to the codecon in japan i kind of the birthplace of judo and everything and i remember i rolled with one old guy i didn't didn't start standing just started on groundwork nuaza and it was striking how different it was from carlos he was still he was better than me and he got my arm and i you know i had to tap there but it was a completely different style where i just felt like i could do nothing he was just enveloping",
        "start": "04:58:28",
        "duration": 199.44000000000005,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "me and just like slowly ground it down and took my arm and bent it while with carlos you know he's just loose and free and you always thought like oh you're just gonna go grab something but you never had any chance to do it but it was very different feeling that's a good summary of the difference between jiu jitsu and judo in jiu jitsu there's it is a dance and you feel like there's a freedom and actually um anybody that's like gordon ryan one of the best the best grappler in the world nogi grappler in the world uh there's a feeling like you can do anything uh but when you actually try to do something you can't just magically doesn't work but with the best judo players in the world yeah it does feel like there's a blanket that weighs a thousand pounds on top of you and there's not a feeling like you can do anything you just you're trapped and that's uh that's a style that's a difference in the style of martial arts but it's also uh once you start the study you understand it all has to do with human movement and the physics of it and the leverage and all that kind of stuff and that's like yeah that's super fascinating at the end of the day for me the biggest benefit is and the humbling aspect when another human being kind of tells you that you know there's a hierarchy or there's a um you're not that special and in the most extreme case when you tap to a choke you are basically living because somebody lets you live and that's that is one of those if you think about it that is a closer brush with mortality than than most people consider and that kind of",
        "start": "05:00:07",
        "duration": 186.71799999999993,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "humbling act is good to take to your work then where it's harder to get humbled you know yeah because nobody's nobody that does any martial art is coming out thinking i'm the best in the world at anything because everybody loses let me ask you for advice what advice would you give to young people today uh about life about career how how they can have a job how they can have an impact how they can have a life they can be proud of so it was kind of fun i got invited to give the commencement speech back at the i went to college for two semesters and and dropped out and went on to do my tech stuff but they still wanted me to come back and give a commencement speech and i i've got that pinned on my twitter account i still feel good about everything that i said there and you know my my biggest point was that the path for me might not be the path for everyone and in fact the advice the the path that i took and even the advice that i would give based on my experience and learnings probably isn't the best advice for everyone because what i did was all about this knowledge in depth it was about not just having this surface level ability to make things do what i want but to really understand them through and through to let me do the systems engineering work and to sometimes find these inefficiencies that can be bypassed and and that the whole world doesn't need that you know most programmers don't need or engineers of any kind don't necessarily need to do that they need to do a little job that's been parceled out to them uh be reliable let people depend on you do quality work with all of that but people that do have an inclination for",
        "start": "05:01:42",
        "duration": 208.08,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "wanting to to know know things deeper and learn things deeper i'm you know the there are just layers and layers of things out there and it it's amazing it's if you're the right person that is excited about that i the world's never been like this before it's better than ever i mean everything that was wonderful for me is still there and there's whole new worlds to explore on the different things that you can do and that i am you know it's hard work embrace the grind with it and understand as much as you can and then be be prepared for opportunities to present themselves where you can't just say this is my goal in life and just push at that i mean you might be able to do that but you're going to make more total progress if you say i'm preparing myself with this broad set of tools and then i'm being aware of all the way things are changing as i move through the world and as the whole world changes around me and then looking for opportunities to deploy the tools that you've built and there's going to be more and more of those types of things there where an awareness of what's happening where the inefficiencies are what things can be done what's possible versus what's current practice and then finding those areas where you can go and make an adjustment and make something that may affect millions or billions of people in the world make it better when maybe from your own example how are you able to recognize this about yourself that you saw the layers in in a particular thing and you were drawn to discovering deeper and deeper truths about it is that something that was obvious to you that you couldn't help or is there some actions you had to take to actually allow yourself to dig deep so in the earliest days of personal computers i remember the the reference",
        "start": "05:03:26",
        "duration": 212.31799999999998,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "manuals and the very early ones even had schematics of uh computers in the background in the in the back of the books as well as firmware listings and things and i could look at that and at that time when i was a younger teenager i didn't understand a lot of that stuff how the different things worked uh i was pulling out the information that i could get but i always wanted to know all of that there was like kind of magical information sitting down there it's like the elder laura that some graybeard wizard i you know is the keeper of and so i always felt that pull for wanting to know more wanting to explore the uh the mysterious areas there and you know and that followed right in through all the things that got the value exploring the video cards leading to the i'm you know the scrolling advantages you know exploring some of the academic papers and things learning about bsp trees and the different things that that i could do um with those systems and just the the huge larval phases going through aerospace just reading bookshelves full of books i mean again that point where i have enough money i can buy all the books i want it was it was so valuable there where i was terrible with my money when i was a kid my mom thought i would always be broke because you know i'd buy my comic books and just be out of money but it was like all the pizza i want all the diet coke i want video games and then books books and it didn't take that much as soon as i was making 27k a year i i felt rich and i was just getting all the things that that i wanted but that sense of you know that books have always been magical to me and that was one of the things that really made me smile is uh andre had said he found when he came over to my house he said he found my library inspiring just",
        "start": "05:05:12",
        "duration": 203.04200000000003,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "it was great to see you know i still look he's kind of a younger guy i sometimes wonder if younger people these days have the same relationship with books that i do where they were such a cornerstone for me in so many ways but that sense that yeah i always wanted to know it all i know i can't and that was like one of the last things i said you can't know everything but you should convince yourself that you can know anything you know any one particular thing it was created and discovered by humans you can learn it you can find out what you need on there and you can learn it deeply yeah you can drive a nail down through whatever layer cake problem space you've got and learn a cross section there and not only can you have an impact doing that you can just you can attain happiness doing that there's something so fulfilling about becoming a craftsman of a thing yeah and i don't want to tell people that look this is a a good career move just you know grit your teeth and you know and bear barrett i you know you want people you want and i do think it is possible sometimes to find the joy in something like it might not immediately appeal to you but i had told people early on like in in software times that i you know it a lot of game developers are in it just because they are so passionate about games but i was always really more flexible in what appealed to me where i said i think i could be quite engaged doing operating system work or even database work i i would find the interest in that i because i think most things that are significant in the world have a lot of layers and complexity to them and a lot of opportunities hidden within them so that would probably be the most important thing to encourage to people is that i'm you can like weaponize curiosity you can deploy your curiosity",
        "start": "05:06:54",
        "duration": 206.16200000000006,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "to find i to kind of like make things useful and valuable to you even if they don't immediately appear that way deploy your curiosity yeah that's very true uh we've mentioned this debate point whether mortality or fear of mortality is fundamental to creating an agi but let's talk about whether it's fundamental to human beings do you think about your own mortality i really don't and and you probably always have to like take with a grain of salt anything somebody says about fundamental things like that i'm but i don't think about really aging impending death legacy with uh with my children things like that and clearly it seems most of the world does a lot a lot more than i do yeah i so i mean i think i'm an outlier in that where it's yeah it doesn't wind up being a real part of my uh my thinking and motivation about things so daily existence is about sort of the people you love and the problems before you i'm very much focused on what i'm working on right now i i i do take that back there's one aspect where the the kind of finiteness of the life does impact me and that is about thinking about the scope of the problems that i'm working on when i you know when i decided to work on when i was like nuclear fission or agi these are big ticket things that i that are impact large fractions of the world and i was thinking to myself at some level that okay i mean i've i may have a couple more swings at bat with me at full capability but yes my my mental abilities will decay with age you know mostly inevitably i i don't think it's a zero percent chance that we will address some of that before it becomes a problem for me i think exciting medical stuff in the next",
        "start": "05:08:37",
        "duration": 225.11999999999995,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "couple decades but i do have this kind of vague plan that when i'm not at the top of my game and i don't feel that i'm you know in a position to put a dent in the world some way that i'll probably wind up doing some kind of recreational retro programming or i'll you know i'll i'll work on some i am you know something that i would not devote my life to now but i can while away my time as the old man gardening in the code worlds and then to step back even bigger let me ask you about why we're here we human beings what's the meaning of it all what's the meaning of life john carmack so very similar with that last question i know a lot of people fret about this question a lot and i just really don't i really don't give away no we are i you know we are biological creatures that happenstance of evolution uh you know we have innate drives that evolution crafted for survival and passing on of genetic codes i'm i don't i don't find a lot of value in trying to go much deeper than that i i have my motivations some of which are you know some of which are probably genetically coded and many of which are contingent on my upbringing and the path that i've had through my life i i don't run into like spates of depression or enwy or anything that uh that winds up being a challenge and forcing a degree of soul-searching with things like that i seem to be okay i'm you know kind of without that um as a brilliant ant in the ant colony without looking up to the sky wondering why the hell am i here again so the the why of it the incredible mystery of the fact that we started first of all the origin of life on earth and from that from single cell organisms the entirety of the evolutionary process took us somehow to this incredibly",
        "start": "05:10:30",
        "duration": 226.95999999999998,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "intelligent thing that is able to build wolfenstein 3d and doom and quake and uh take a crack at the problem of agi and create things that eventually supersede human beings that doesn't the why of it is um it's been my experience that people that focus on uh that don't focus on the here and now right in front of them tend to be less effective i mean it's not 100 you know vision matters to some people but i it doesn't seem to be a necessary motivator for me and i think that the process of getting there is usually done it's like the magic of gradient descent people just don't believe that just looking locally gets you to all of these spectacular things that's been you know the decades of looking at i am really some of the smartest people in the world that would just push back forever against this idea that it's not this grand sophisticated vision of everything but little tiny steps local information winds up leading to all the best answers so the meaning of life is uh following locally wherever the gradient ascent takes you this was an incredible conversation officially the longest conversation i've ever done on the podcast uh which means a lot to me because i get to do it with one of my heroes john i can't tell you how much it means to me that you would sit down with me you're an incredible human being um i can't wait what you do next but you've already changed the world you're an inspiration to so many people and again we haven't covered like most of what i was planning to talk about so i hope we get a chance to talk someday in the future i can't wait to see what you do next thank you so much again for talking to me thank you very much",
        "start": "05:12:24",
        "duration": 212.88000000000002,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    },
    {
        "text": "thanks for listening to this conversation with john carmack to support this podcast please check out our sponsors in the description and now let me leave you some words from john carmack himself focused hard work is the real key to success keep your eyes on the goal and just keep taking the next step towards completing it if you aren't sure which way to do something do it both ways and see which works better thank you for listening and hope to see you next time you",
        "start": "05:14:11",
        "duration": 65.282,
        "title": "John Carmack: Doom, Quake, VR, AGI, Programming, Video Games, and Rockets | Lex Fridman Podcast #309"
    }
]